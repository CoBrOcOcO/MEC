@using System.Web
@using Microsoft.AspNetCore.Localization
@inject NavigationManager NavigationManager
@inject LanguageNotifier LanguageNotifier
@implements IDisposable

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    @*     <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" /> *@
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href=@Assets["_content/MudBlazor/MudBlazor.min.css"] rel="stylesheet" />
    <ImportMap />
    <link rel="icon" type="image/ico" href="favicon.ico" />
    <HeadOutlet />
</head>
<body>
    <Routes @rendermode=RenderMode.InteractiveServer />

    @* ===== BESTEHENDE SCRIPTS ===== *@
    <script src="_framework/blazor.web.js"></script>
    <script src=@Assets["_content/MudBlazor/MudBlazor.min.js"]></script>

    @* ===== GITEA-INTEGRATION HINZUGEFÜGT ===== *@
    <script>
        // JavaScript für File-Download (Gitea-Integration)
        window.downloadFile = (filename, base64Content) => {
            try {
                console.log(`📥 Download gestartet: ${filename}`);

                // Base64 zu Blob konvertieren
                const binaryString = atob(base64Content);
                const bytes = new Uint8Array(binaryString.length);

                for (let i = 0; i < binaryString.length; i++) {
                    bytes[i] = binaryString.charCodeAt(i);
                }

                const blob = new Blob([bytes]);

                // Download-Link erstellen
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = filename;

                // Link automatisch klicken
                document.body.appendChild(link);
                link.click();

                // Cleanup
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);

                console.log(`✅ Download erfolgreich: ${filename}`);

            } catch (error) {
                console.error(`❌ Download-Fehler: ${error.message}`);
                alert(`Download fehlgeschlagen: ${error.message}`);
            }
        };
    </script>
</body>
</html>

@code {
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        LoadCulture();
    }

    private void LoadCulture()
    {
        var cultureFromUrl = GetCultureFromUrl(NavigationManager.Uri);
        LanguageNotifier.CurrentCulture = cultureFromUrl;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs locationChangedEventArgs)
    {
        LoadCulture();
    }

    private CultureInfo GetCultureFromUrl(string url)
    {
        var uri = new Uri(url);
        var urlParameters = HttpUtility.ParseQueryString(uri.Query);
        var culture = CultureInfo.GetCultureInfo(urlParameters["language"] ?? "");
        return culture;
    }

    public void Dispose() => NavigationManager.LocationChanged -= OnLocationChanged;
}