@page "/installation/orders"
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@layout MainLayout

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 50px;">
    <MudStack Spacing="4">
        <!-- Header Section -->
        <MudStack Spacing="3">
            <MudText Typo="Typo.h4" Align="Align.Center">
                Installation
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Secondary">
                @activeProjects.Count Projekte in Bearbeitung
            </MudText>

            <!-- Search Field -->
            <MudTextField @bind-Value="searchQuery"
                          Immediate="true"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="FilterProjects"
                          Placeholder="Projekt suchen..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-4" />
        </MudStack>

        <!-- Loading -->
        @if (loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }

        <!-- Active Projects -->
        @if (filteredActiveProjects.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mt-4">Aktive Installationen</MudText>
            <MudStack Spacing="3">
                @foreach (var project in filteredActiveProjects)
                {
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <!-- Project Info -->
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">@project.ProjectNumber</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@project.Name</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                    @project.Workflows.Count(w => w.Status == WorkflowStatus.ForwardedToInstallation) Formulare zur Installation
                                </MudText>
                            </MudStack>

                            <!-- Action Button -->
                            <MudButton Color="Color.Primary"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       OnClick="() => ViewProjectDetails(project.Id)">
                                Details
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        }

        <!-- Completed Projects -->
        @if (filteredCompletedProjects.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-6">Abgeschlossene Installationen</MudText>
            <MudStack Spacing="3">
                @foreach (var project in filteredCompletedProjects)
                {
                    <MudPaper Class="pa-4" Elevation="1" Style="opacity: 0.8;">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <!-- Project Info -->
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">@project.ProjectNumber</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@project.Name</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Success">
                                    Installation abgeschlossen
                                </MudText>
                            </MudStack>

                            <!-- Action Button -->
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Outlined"
                                       Size="Size.Medium"
                                       OnClick="() => ViewProjectDetails(project.Id)">
                                Details
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        }

        <!-- Empty State -->
        @if (!loading && !filteredActiveProjects.Any() && !filteredCompletedProjects.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Class="mt-6">
                <MudImage Src="assets/systemstatus/empty_state_V1.png" Alt="Empty" Width="150" Class="ma-6" />
                <MudText Typo="Typo.h6" Color="Color.Secondary">Keine Installationen gefunden</MudText>
            </MudStack>
        }

        <!-- Back Button -->
        <MudButton Variant="Variant.Text"
                   Size="Size.Small"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   FullWidth="true"
                   OnClick="GoBack"
                   Class="mt-4">
            Zurück zur Startseite
        </MudButton>
    </MudStack>
</MudContainer>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    private List<DbProject> activeProjects = new();
    private List<DbProject> completedProjects = new();
    private List<DbProject> filteredActiveProjects = new();
    private List<DbProject> filteredCompletedProjects = new();
    private bool loading = true;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    /// <summary>
    /// Load all projects relevant for installation
    /// </summary>
    private async Task LoadProjects()
    {
        loading = true;
        try
        {
            var allProjects = await DbContext.Project
                .Include(p => p.Workflows)
                .Where(p => p.Workflows.Any(w =>
                    w.Status == WorkflowStatus.ForwardedToInstallation ||
                    w.Status == WorkflowStatus.Archived))
                .OrderBy(p => p.ProjectNumber)
                .ToListAsync();

            // Separate active and completed projects
            activeProjects = allProjects
                .Where(p => p.Workflows.Any(w => w.Status == WorkflowStatus.ForwardedToInstallation))
                .ToList();

            completedProjects = allProjects
                .Where(p => p.Workflows.Any(w => w.Status == WorkflowStatus.Archived))
                .ToList();

            FilterProjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
            Snackbar.Add($"Fehler beim Laden: {ex.Message}", Severity.Error);
            activeProjects = new List<DbProject>();
            completedProjects = new List<DbProject>();
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Filter projects based on search query
    /// </summary>
    private void FilterProjects()
    {
        var query = searchQuery.Trim().ToLower();

        if (string.IsNullOrEmpty(query))
        {
            filteredActiveProjects = activeProjects;
            filteredCompletedProjects = completedProjects;
        }
        else
        {
            filteredActiveProjects = activeProjects
                .Where(p => p.ProjectNumber.ToLower().Contains(query) ||
                           p.Name.ToLower().Contains(query))
                .ToList();

            filteredCompletedProjects = completedProjects
                .Where(p => p.ProjectNumber.ToLower().Contains(query) ||
                           p.Name.ToLower().Contains(query))
                .ToList();
        }

        // Trigger UI update
        StateHasChanged();
    }

    /// <summary>
    /// Navigate to project details
    /// </summary>
    private void ViewProjectDetails(Guid projectId)
    {
        Navigation.NavigateTo($"/installation/project/{projectId}?returnPath=overview");
    }

    /// <summary>
    /// Navigate back to home
    /// </summary>
    private void GoBack()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            Navigation.NavigateTo(ReturnUrl);
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }
}