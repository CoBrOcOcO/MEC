@page "/installation/project/{ProjectId:guid}"
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject InstallationPdfService PdfService
@inject IJSRuntime JSRuntime
@layout MainLayout

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudStack Spacing="4">

        <!-- Project Header -->
        @if (currentProject != null)
        {
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h4" Color="Color.Primary">@currentProject.ProjectNumber </MudText>
                        <MudText Typo="Typo.h4" Color="Color.Secondary">@currentProject.Name</MudText>
                        @if (!string.IsNullOrWhiteSpace(currentProject.Description))
                        {
                            <MudText Typo="Typo.body2" Color="Color.Tertiary">@currentProject.Description</MudText>
                        }
                    </MudStack>

                    <!-- Action Buttons -->
                    <MudStack Row Spacing="3">
                        <MudButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   Size="Size.Medium"
                                   StartIcon="@Icons.Material.Filled.ArrowBack"
                                   OnClick="NavigateBack">
                            Zurück
                        </MudButton>

                        @if (!isProjectArchived)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Assignment"
                                       OnClick="ReleaseForCorrection"
                                       Loading="@isReleasingForCorrection"
                                       Disabled="@(!forwardedWorkflows.Any() || isReleasingForCorrection)">
                                Zur Korrektur freigeben
                            </MudButton>

                            <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.CheckCircle"
                                       OnClick="CompleteInstallation"
                                       Loading="@isCompletingInstallation"
                                       Disabled="@(!forwardedWorkflows.Any() || isCompletingInstallation)">
                                Installation abgeschlossen
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Warning"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="ReopenForEditing"
                                       Loading="@isReopening"
                                       Disabled="@isReopening">
                                Zur Bearbeitung öffnen
                            </MudButton>
                        }
                    </MudStack>
                </MudStack>
            </MudPaper>
        }

        <!-- Loading -->
        @if (loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }

        <!-- No forwarded workflows message -->
        @if (!loading && !forwardedWorkflows.Any())
        {
            <MudAlert Severity="Severity.Info">
                <MudText>Keine Formulare zur Installation für dieses Projekt gefunden.</MudText>
            </MudAlert>
        }

        <!-- Individual Workflow Installation Details -->
        @if (!loading && forwardedWorkflows.Any())
        {
            var bdrWorkflows = forwardedWorkflows.Where(w => w.WorkflowType == WorkflowType.BDR).OrderBy(w => w.Name).ToList();
            var bvWorkflows = forwardedWorkflows.Where(w => w.WorkflowType == WorkflowType.BV).OrderBy(w => w.Name).ToList();

            <!-- PROJECT STATUS OVERVIEW -->
            <ProjectStatusOverview ProjectId="@ProjectId"
                                   IsLoading="@loading" />
            <!-- BDR Section Header -->
            @if (bdrWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-2">
                    <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Primary">BDR - Bedienungsrechner (@bdrWorkflows.Count)</MudText>
                    <MudSpacer />

                </MudStack>

                <!-- BDR Installation Forms -->
                @foreach (var workflow in bdrWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);

                    <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-block-end: 4px solid var(--mud-palette-primary);">
                        <MudStack Spacing="3">


                            <!-- Workflow Header mit PDF Button -->

                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Spacing="2">

                                    <MudButton Color="Color.Primary"
                                               Variant="Variant.Outlined"
                                               StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                               OnClick="ExportAllBdrToPdf"
                                               Loading="@isExportingPdf"
                                               Disabled="@isExportingPdf">
                                        Alle BDR als PDF
                                    </MudButton>
                                </MudStack>

                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                               Color="Color.Primary"
                                               Size="Size.Medium"
                                               OnClick="@(() => ExportSingleBdrToPdf(workflow.Id))"
                                               Title="BDR Installations-PDF"
                                               Loading="@exportingWorkflowIds.Contains(workflow.Id)"
                                               Disabled="@exportingWorkflowIds.Contains(workflow.Id)" />
                            </MudStack>

                            <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                                 WorkflowType="BDR - Bedienungsrechner"
                                                 WorkflowIcon="@Icons.Material.Filled.Computer"
                                                 MainHardware="@orderDetails.MainHardware"
                                                 HardwareItems="@orderDetails.HardwareDetails"
                                                 SoftwareItems="@orderDetails.Software"
                                                 Notes="@orderDetails.Notes"
                                                 HardwareRemarks="@orderDetails.HardwareRemarks"
                                                 SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                                 ShowComments="false">
                            </WorkflowDetailsCard>



                            <!-- Network Configuration Integration -->

                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #f5f5f5 0%, #ffffff 100%); border-left: 4px solid #4caf50; border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.NetworkCheck" Color="Color.Success" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #4caf50; font-weight: 600;">
                                            Netzwerk-Konfiguration
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    <MudGrid Spacing="3">
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Router" Size="Size.Small" Class="mr-1" />
                                                    MAC-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].MacAddress"
                                                              Placeholder="00:00:00:00:00:00"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("HH:HH:HH:HH:HH:HH") { MaskChars = new[] { new MaskChar('H', @"[0-9A-Fa-f]") } })"
                                                              HelperText="Format: XX:XX:XX:XX:XX:XX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" Class="mr-1" />
                                                    IP-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].IpAddress"
                                                              Placeholder="192.168.1.100"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("DDD.DDD.DDD.DDD") { MaskChars = new[] { new MaskChar('D', @"[0-9]") } })"
                                                              HelperText="Format: XXX.XXX.XXX.XXX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>


                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Class="mt-2">
                                        @if (networkConfigSaveStatus.TryGetValue(workflow.Id, out var status))
                                        {
                                            <MudChip T="string"
                                                     Icon="@(status.IsSuccess ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                                     Size="Size.Small"
                                                     Color="@(status.IsSuccess ? Color.Success : Color.Error)"
                                                     OnClose="@(() => ClearSaveStatus(workflow.Id))">
                                                @if (status.IsSuccess)
                                                {
                                                    <text>Gespeichert @status.SaveTime.ToString("HH:mm")</text>
                                                }
                                                else
                                                {
                                                    <text>@status.ErrorMessage</text>
                                                }
                                            </MudChip>
                                        }

                                        <MudButton Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Medium"
                                                   StartIcon="@Icons.Material.Filled.Save"
                                                   OnClick="@(() => SaveIndividualNetworkConfig(workflow.Id))"
                                                   Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                   Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                            Speichern
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>

                            <!-- Comments Section für BDR -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%); border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Color="Color.Default" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #616161; font-weight: 600;">
                                            Kommentare & Bemerkungen
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    @if (!string.IsNullOrEmpty(GetWorkflowComment(workflow.Id)))
                                    {
                                        <MudStack Spacing="2">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Default" />
                                                <MudText Typo="Typo.subtitle2" Style="color: #757575; font-weight: 600;">
                                                    Kommentar vom Einkauf:
                                                </MudText>
                                            </MudStack>
                                            <MudPaper Class="pa-3" Elevation="0" Style="background-color: #f5f5f5; border-left: 4px solid #9e9e9e; border-radius: 4px;">
                                                <MudText Typo="Typo.body2" Style="color: #424242; line-height: 1.6;">
                                                    @GetWorkflowComment(workflow.Id)
                                                </MudText>
                                            </MudPaper>
                                        </MudStack>
                                    }

                                    <MudStack Spacing="2">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Success" />
                                            <MudText Typo="Typo.subtitle2" Style="color: #4caf50; font-weight: 600;">
                                                Installations-Notizen:
                                            </MudText>
                                        </MudStack>
                                        <MudTextField Value="@GetInstallationComment(workflow.Id)"
                                                      ValueChanged="@((string value) => UpdateInstallationComment(workflow.Id, value))"
                                                      Placeholder="Besondere Vorkommnisse, Probleme, Lösungen während der Installation..."
                                                      Variant="Variant.Outlined"
                                                      Lines="4"
                                                      AutoGrow
                                                      ReadOnly="@isProjectArchived" />

                                        <MudStack Row Justify="Justify.FlexEnd">
                                            <MudButton Color="Color.Success"
                                                       Variant="Variant.Filled"
                                                       Size="Size.Medium"
                                                       StartIcon="@Icons.Material.Filled.Save"
                                                       OnClick="@(() => SaveInstallationNotes(workflow.Id))"
                                                       Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                       Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                                Speichern
                                            </MudButton>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                }
            }

            <!-- BV Section -->
            @if (bvWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-6">
                    <MudIcon Icon="@Icons.Material.Filled.CameraAlt" Color="Color.Secondary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary">BV - Bildverarbeitungsrechner (@bvWorkflows.Count)</MudText>
                    <MudSpacer />

                </MudStack>

                <!-- BV Installation Forms -->
                @foreach (var workflow in bvWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);
                    var contactPerson = GetContactPersonForBvWorkflow(workflow);

                    <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-left: 4px solid var(--mud-palette-secondary);">
                        <MudStack Spacing="3">



                            <!-- Workflow Header mit PDF Button -->


                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">

                                <!-- ALL PDF Button -->
                                <MudButton Color="Color.Secondary"
                                           Variant="Variant.Outlined"
                                           StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                           OnClick="ExportAllBvToPdf"
                                           Loading="@isExportingPdf"
                                           Disabled="@isExportingPdf">
                                    Alle BV als PDF
                                </MudButton>


                                <!-- Single PDF Button -->
                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                               Color="Color.Secondary"
                                               Size="Size.Medium"
                                               OnClick="@(() => ExportSingleBvToPdf(workflow.Id))"
                                               Title="BV Installations-PDF"
                                               Loading="@exportingWorkflowIds.Contains(workflow.Id)"
                                               Disabled="@exportingWorkflowIds.Contains(workflow.Id)" />
                            </MudStack>

                            <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                                 WorkflowType="BV - Bildverarbeitungsrechner"
                                                 WorkflowIcon="@Icons.Material.Filled.CameraAlt"
                                                 MainHardware="@orderDetails.MainHardware"
                                                 HardwareItems="@orderDetails.HardwareDetails"
                                                 SoftwareItems="@orderDetails.Software"
                                                 Notes="@orderDetails.Notes"
                                                 ContactPerson="@contactPerson"
                                                 HardwareRemarks="@orderDetails.HardwareRemarks"
                                                 SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                                 ShowComments="false">
                            </WorkflowDetailsCard>

                            <!-- Network Configuration Integration -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #f5f5f5 0%, #ffffff 100%); border-left: 4px solid #4caf50; border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.NetworkCheck" Color="Color.Success" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #4caf50; font-weight: 600;">
                                            Netzwerk-Konfiguration
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    <MudGrid Spacing="3">
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Router" Size="Size.Small" Class="mr-1" />
                                                    MAC-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].MacAddress"
                                                              Placeholder="00:00:00:00:00:00"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("HH:HH:HH:HH:HH:HH") { MaskChars = new[] { new MaskChar('H', @"[0-9A-Fa-f]") } })"
                                                              HelperText="Format: XX:XX:XX:XX:XX:XX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" Class="mr-1" />
                                                    IP-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].IpAddress"
                                                              Placeholder="192.168.1.100"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("DDD.DDD.DDD.DDD") { MaskChars = new[] { new MaskChar('D', @"[0-9]") } })"
                                                              HelperText="Format: XXX.XXX.XXX.XXX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>

                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Class="mt-2">
                                        @if (networkConfigSaveStatus.TryGetValue(workflow.Id, out var bvStatus))
                                        {
                                            <MudChip T="string"
                                                     Icon="@(bvStatus.IsSuccess ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                                     Size="Size.Small"
                                                     Color="@(bvStatus.IsSuccess ? Color.Success : Color.Error)"
                                                     OnClose="@(() => ClearSaveStatus(workflow.Id))">
                                                @if (bvStatus.IsSuccess)
                                                {
                                                    <text>Gespeichert @bvStatus.SaveTime.ToString("HH:mm")</text>
                                                }
                                                else
                                                {
                                                    <text>@bvStatus.ErrorMessage</text>
                                                }
                                            </MudChip>
                                        }

                                        <MudButton Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Medium"
                                                   StartIcon="@Icons.Material.Filled.Save"
                                                   OnClick="@(() => SaveIndividualNetworkConfig(workflow.Id))"
                                                   Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                   Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                            Speichern
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>

                            <!-- Comments Section für BV -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%); border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Color="Color.Default" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #616161; font-weight: 600;">
                                            Kommentare & Bemerkungen
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    @if (!string.IsNullOrEmpty(GetWorkflowComment(workflow.Id)))
                                    {
                                        <MudStack Spacing="2">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Default" />
                                                <MudText Typo="Typo.subtitle2" Style="color: #757575; font-weight: 600;">
                                                    Kommentar vom Einkauf:
                                                </MudText>
                                            </MudStack>
                                            <MudPaper Class="pa-3" Elevation="0" Style="background-color: #f5f5f5; border-left: 4px solid #9e9e9e; border-radius: 4px;">
                                                <MudText Typo="Typo.body2" Style="color: #424242; line-height: 1.6;">
                                                    @GetWorkflowComment(workflow.Id)
                                                </MudText>
                                            </MudPaper>
                                        </MudStack>
                                    }

                                    <MudStack Spacing="2">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Success" />
                                            <MudText Typo="Typo.subtitle2" Style="color: #4caf50; font-weight: 600;">
                                                Installations-Notizen:
                                            </MudText>
                                        </MudStack>
                                        <MudTextField Value="@GetInstallationComment(workflow.Id)"
                                                      ValueChanged="@((string value) => UpdateInstallationComment(workflow.Id, value))"
                                                      Placeholder="Besondere Vorkommnisse, Probleme, Lösungen während der Installation..."
                                                      Variant="Variant.Outlined"
                                                      Lines="4"
                                                      AutoGrow
                                                      ReadOnly="@isProjectArchived" />

                                        <MudStack Row Justify="Justify.FlexEnd">
                                            <MudButton Color="Color.Success"
                                                       Variant="Variant.Filled"
                                                       Size="Size.Medium"
                                                       StartIcon="@Icons.Material.Filled.Save"
                                                       OnClick="@(() => SaveInstallationNotes(workflow.Id))"
                                                       Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                       Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                                Speichern
                                            </MudButton>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                }
            }
            <!-- Summary -->
            <MudPaper Class="pa-4 mt-4 mb-4" Elevation="1" Style="background-color: var(--mud-palette-background-grey);">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Primary">@bdrWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BDR Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Secondary">@bvWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BV Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Success">@(bdrWorkflows.Count + bvWorkflows.Count)</MudText>
                            <MudText Typo="Typo.caption">Gesamt</MudText>
                        </MudStack>
                    </MudStack>
                    <MudText Typo="Typo.body1" Color="Color.Success" Class="font-weight-bold">
                        Bereit für Installation
                    </MudText>
                </MudStack>
            </MudPaper>
        }

        <!-- Back Button -->
        <MudButton Variant="Variant.Text"
                   Size="Size.Small"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   FullWidth="true"
                   OnClick="NavigateBack"
                   Class="mt-4">
            Zurück zur Übersicht
        </MudButton>

    </MudStack>
</MudContainer>

@code {
    [Parameter] public Guid ProjectId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnPath { get; set; }

    // Network Configuration Data Structure
    public class NetworkConfiguration
    {
        public string MacAddress { get; set; } = string.Empty;
        public string IpAddress { get; set; } = string.Empty;
    }

    // Order Details Data Structure
    public class OrderDetails
    {
        public string MainHardware { get; set; } = string.Empty;
        public List<string> HardwareDetails { get; set; } = new();
        public List<string> AdditionalHardware { get; set; } = new();
        public List<string> PcDetails { get; set; } = new();
        public List<string> Software { get; set; } = new();
        public string Notes { get; set; } = string.Empty;
        public string HardwareRemarks { get; set; } = string.Empty;
        public string SoftwareRemarks { get; set; } = string.Empty;
    }

    // Save Status Class
    public class SaveStatus
    {
        public bool IsSuccess { get; set; }
        public DateTime SaveTime { get; set; }
        public string ErrorMessage { get; set; } = "";
    }

    // Component state
    private DbProject? currentProject;
    private List<DbWorkflow> forwardedWorkflows = new();
    private bool loading = true;
    private bool isCompletingInstallation = false;
    private bool isReleasingForCorrection = false;
    private bool isExportingPdf = false;
    private HashSet<Guid> exportingWorkflowIds = new();
    private HashSet<Guid> savingWorkflowIds = new();
    private Dictionary<Guid, SaveStatus> networkConfigSaveStatus = new();

    // Comments from purchase (read-only)
    private Dictionary<Guid, string> workflowComments = new();

    // Installation comments
    private Dictionary<Guid, string> installationComments = new();

    // Network configurations
    private Dictionary<Guid, NetworkConfiguration> networkConfigurations = new();

    // Data caches for performance
    private Dictionary<Guid, DbHardwareComputer?> bdrHardwareCache = new();
    private Dictionary<Guid, List<DbHardwareField>> bdrFieldsCache = new();
    private Dictionary<Guid, DbBvHardwareComputer?> bvHardwareCache = new();
    private Dictionary<Guid, List<DbBvHardwareComponent>> bvComponentsCache = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectDetails();
    }

    /// <summary>
    /// Load project and workflows forwarded to installation
    /// </summary>
    private async Task LoadProjectDetails()
    {
        loading = true;
        try
        {
            currentProject = await DbContext.Project
                .Include(p => p.Workflows)
                .FirstOrDefaultAsync(p => p.Id == ProjectId);

            if (currentProject == null)
            {
                Snackbar.Add("Projekt nicht gefunden!", Severity.Error);
                return;
            }

            forwardedWorkflows = currentProject.Workflows
                .Where(w => w.Status == WorkflowStatus.ForwardedToInstallation ||
                           w.Status == WorkflowStatus.Archived)
                .OrderBy(w => w.WorkflowType)
                .ThenBy(w => w.Name)
                .ToList();

            if (!forwardedWorkflows.Any())
            {
                Snackbar.Add("Keine Formulare zur Installation für dieses Projekt gefunden.", Severity.Info);
                return;
            }

            await LoadDetailedData();
            await LoadNetworkConfigurations();
            LoadWorkflowComments();
            LoadInstallationComments();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden des Projekts: {ex.Message}", Severity.Error);
            Console.WriteLine($"LoadProjectDetails Error: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Save network configuration for individual workflow
    /// </summary>
    private async Task SaveIndividualNetworkConfig(Guid workflowId)
    {
        // Prevent saving archived workflows
        if (isProjectArchived)
        {
            Snackbar.Add("Archivierte Projekte können nicht bearbeitet werden!", Severity.Warning);
            return;
        }

        networkConfigSaveStatus.Remove(workflowId);
        savingWorkflowIds.Add(workflowId);
        StateHasChanged();

        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            var workflow = forwardedWorkflows.FirstOrDefault(w => w.Id == workflowId);
            if (workflow == null)
            {
                throw new Exception("Projekt nicht gefunden");
            }

            // Additional check for individual workflow status
            if (workflow.Status == WorkflowStatus.Archived)
            {
                throw new Exception("Dieser Workflow ist archiviert und kann nicht bearbeitet werden");
            }

            var config = await DbContext.InstallationConfiguration
                .FirstOrDefaultAsync(c => c.WorkflowId == workflowId);

            var networkConfig = networkConfigurations[workflowId];

            if (config == null)
            {
                config = new DbInstallationConfiguration
                {
                    Id = Guid.NewGuid(),
                    WorkflowId = workflowId,
                    MacAddress = networkConfig.MacAddress,
                    IpAddress = networkConfig.IpAddress,
                    CreationDate = DateTime.UtcNow,
                    LastChange = DateTime.UtcNow
                };
                DbContext.InstallationConfiguration.Add(config);
            }
            else
            {
                config.MacAddress = networkConfig.MacAddress;
                config.IpAddress = networkConfig.IpAddress;
                config.LastChange = DateTime.UtcNow;
            }

            var existingDescription = workflow.Description ?? "";

            if (existingDescription.Contains("INSTALLATION_COMMENT:"))
            {
                var startIndex = existingDescription.IndexOf("INSTALLATION_COMMENT:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            var installComment = GetInstallationComment(workflowId);
            if (!string.IsNullOrWhiteSpace(installComment))
            {
                workflow.Description = existingDescription + $"INSTALLATION_COMMENT:{installComment.Trim()}ENDMEC:";
            }

            workflow.LastChange = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            networkConfigSaveStatus[workflowId] = new SaveStatus
            {
                IsSuccess = true,
                SaveTime = DateTime.Now
            };

            Snackbar.Add($"Netzwerk-Konfiguration für {workflow.Name} gespeichert!", Severity.Success);
        }
        catch (Exception ex)
        {
            networkConfigSaveStatus[workflowId] = new SaveStatus
            {
                IsSuccess = false,
                ErrorMessage = ex.Message
            };

            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveIndividualNetworkConfig Error: {ex}");
        }
        finally
        {
            savingWorkflowIds.Remove(workflowId);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Clear save status for workflow
    /// </summary>
    private void ClearSaveStatus(Guid workflowId)
    {
        networkConfigSaveStatus.Remove(workflowId);
    }

    /// <summary>
    /// Load hardware/software details from database
    /// </summary>
    private async Task LoadDetailedData()
    {
        try
        {
            var bdrWorkflowIds = forwardedWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BDR)
                .Select(w => w.Id)
                .ToList();

            if (bdrWorkflowIds.Any())
            {
                var bdrHardwareWithFields = await DbContext.HardwareComputer
                    .Include(h => h.HardwareFields.Where(f => f.IsActive))
                    .Where(h => bdrWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bdrHardwareWithFields)
                {
                    bdrHardwareCache[hardware.WorkflowId] = hardware;
                    var fields = hardware.HardwareFields
                        .OrderBy(f => f.DisplayOrder)
                        .ThenBy(f => f.DisplayName)
                        .ToList();
                    bdrFieldsCache[hardware.WorkflowId] = fields;
                }
            }

            var bvWorkflowIds = forwardedWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BV)
                .Select(w => w.Id)
                .ToList();

            if (bvWorkflowIds.Any())
            {
                var bvHardwareList = await DbContext.BvHardwareComputer
                    .Where(h => bvWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bvHardwareList)
                {
                    bvHardwareCache[hardware.WorkflowId] = hardware;
                    var components = await DbContext.BvHardwareComponent
                        .Where(c => c.BvHardwareComputerId == hardware.Id && c.IsActive && c.IsSelected)
                        .ToListAsync();
                    bvComponentsCache[hardware.WorkflowId] = components;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der Hardware-Details: {ex.Message}", Severity.Warning);
            Console.WriteLine($"LoadDetailedData Error: {ex}");
        }
    }

    /// <summary>
    /// Load network configurations from database
    /// </summary>
    private async Task LoadNetworkConfigurations()
    {
        try
        {
            var workflowIds = forwardedWorkflows.Select(w => w.Id).ToList();
            var configs = await DbContext.InstallationConfiguration
                .Where(c => workflowIds.Contains(c.WorkflowId))
                .ToListAsync();

            foreach (var workflow in forwardedWorkflows)
            {
                var config = configs.FirstOrDefault(c => c.WorkflowId == workflow.Id);
                if (config != null)
                {
                    networkConfigurations[workflow.Id] = new NetworkConfiguration
                    {
                        MacAddress = config.MacAddress ?? "",
                        IpAddress = config.IpAddress ?? "",
                    };
                }
                else
                {
                    networkConfigurations[workflow.Id] = new NetworkConfiguration();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadNetworkConfigurations Error: {ex}");
            foreach (var workflow in forwardedWorkflows)
            {
                networkConfigurations[workflow.Id] = new NetworkConfiguration();
            }
        }
    }

    /// <summary>
    /// Load purchase comments from workflow descriptions
    /// </summary>
    private void LoadWorkflowComments()
    {
        foreach (var workflow in forwardedWorkflows)
        {
            var comment = ParseWorkflowComment(workflow.Description ?? "", "PURCHASE_COMMENT:");
            workflowComments[workflow.Id] = comment;
        }
    }

    /// <summary>
    /// Load installation comments from workflow descriptions
    /// </summary>
    private void LoadInstallationComments()
    {
        foreach (var workflow in forwardedWorkflows)
        {
            var comment = ParseWorkflowComment(workflow.Description ?? "", "INSTALLATION_COMMENT:");
            installationComments[workflow.Id] = comment;
        }
    }

    /// <summary>
    /// Parse comment from workflow description
    /// </summary>
    private string ParseWorkflowComment(string description, string prefix)
    {
        if (string.IsNullOrEmpty(description) || !description.Contains(prefix))
            return "";

        try
        {
            var startIndex = description.IndexOf(prefix) + prefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            if (endIndex > startIndex)
            {
                return description.Substring(startIndex, endIndex - startIndex);
            }
            else if (startIndex < description.Length)
            {
                return description.Substring(startIndex);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ParseWorkflowComment Error: {ex.Message}");
        }

        return "";
    }

    /// <summary>
    /// Get purchase comment for workflow
    /// </summary>
    private string GetWorkflowComment(Guid workflowId)
    {
        return workflowComments.TryGetValue(workflowId, out var comment) ? comment : "";
    }

    /// <summary>
    /// Get installation comment for workflow
    /// </summary>
    private string GetInstallationComment(Guid workflowId)
    {
        return installationComments.TryGetValue(workflowId, out var comment) ? comment : "";
    }

    /// <summary>
    /// Update installation comment
    /// </summary>
    private void UpdateInstallationComment(Guid workflowId, string comment)
    {
        installationComments[workflowId] = comment ?? "";
    }

    /// <summary>
    /// Update network configuration
    /// </summary>
    private void UpdateNetworkConfig(Guid workflowId, string macAddress, string ipAddress)
    {
        if (!networkConfigurations.ContainsKey(workflowId))
        {
            networkConfigurations[workflowId] = new NetworkConfiguration();
        }

        var config = networkConfigurations[workflowId];
        config.MacAddress = macAddress ?? "";
        config.IpAddress = ipAddress ?? "";
    }

    // Workflow management methods
    private async Task ReleaseForCorrection()
    {
        if (!forwardedWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zur Freigabe vorhanden!", Severity.Warning);
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Zur Korrektur freigeben",
            markupMessage: new MarkupString($@"
                <div style='line-height: 1.6;'>
                    <div style='margin-bottom: 16px;'>
                        Möchten Sie das Projekt zur Korrektur freigeben?
                    </div>

                    <div style='margin-bottom: 8px; font-weight: 600; color: #1976d2;'>
                        Projekt:
                    </div>
                    <div style='margin-bottom: 16px; font-weight: 500;'>
                        {currentProject?.ProjectNumber} - {currentProject?.Name}
                    </div>

                    <div style='color: #ff9800; font-weight: 500; display: flex; align-items: center; gap: 8px;'>
                        <span style='font-size: 18px;'>📝</span>
                        <span>Das Projekt geht zurück zum Einkauf.</span>
                    </div>
                </div>
            "),
            yesText: "Freigeben",
            noText: "Abbrechen"
        );

        if (result != true) return;

        isReleasingForCorrection = true;
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            foreach (var workflow in forwardedWorkflows)
            {
                workflow.Status = WorkflowStatus.Completed;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt erfolgreich zur Korrektur freigegeben!", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo("/installation/orders");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Freigeben: {ex.Message}", Severity.Error);
            Console.WriteLine($"ReleaseForCorrection Error: {ex}");
        }
        finally
        {
            isReleasingForCorrection = false;
        }
    }

    private async Task CompleteInstallation()
    {
        if (!forwardedWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zum Abschließen vorhanden!", Severity.Warning);
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Installation abschließen",
            markupMessage: new MarkupString($@"
                <div style='line-height: 1.6;'>
                    <div style='margin-bottom: 16px;'>
                        Möchten Sie die Installation abschließen?
                    </div>

                    <div style='margin-bottom: 8px; font-weight: 600; color: #1976d2;'>
                        Projekt:
                    </div>
                    <div style='margin-bottom: 16px; font-weight: 500;'>
                        {currentProject?.ProjectNumber} - {currentProject?.Name}
                    </div>

                    <div style='color: #4caf50; font-weight: 500; display: flex; align-items: center; gap: 8px;'>
                        <span style='font-size: 18px;'>✅</span>
                        <span>Das Projekt wird als vollständig installiert markiert.</span>
                    </div>
                </div>
            "),
            yesText: "Abschließen",
            noText: "Abbrechen"
        );

        if (result != true) return;

        isCompletingInstallation = true;
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            foreach (var workflow in forwardedWorkflows)
            {
                workflow.Status = WorkflowStatus.Archived;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Installation erfolgreich abgeschlossen!", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo("/installation/orders");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Abschließen: {ex.Message}", Severity.Error);
            Console.WriteLine($"CompleteInstallation Error: {ex}");
        }
        finally
        {
            isCompletingInstallation = false;
        }
    }

    // PDF Export Methods - Direct Generation without Storage
    private async Task ExportAllBdrToPdf()
    {
        if (isExportingPdf) return;
        isExportingPdf = true;

        try
        {
            var downloadUrl = $"/api/pdf/download-project/{ProjectId}/BDR";
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
            Snackbar.Add("BDR PDFs werden generiert...", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExportingPdf = false;
        }
    }

    private async Task ExportAllBvToPdf()
    {
        if (isExportingPdf) return;
        isExportingPdf = true;

        try
        {
            var downloadUrl = $"/api/pdf/download-project/{ProjectId}/BV";
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
            Snackbar.Add("BV PDFs werden generiert...", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExportingPdf = false;
        }
    }

    private async Task ExportSingleBdrToPdf(Guid workflowId)
    {
        exportingWorkflowIds.Add(workflowId);

        try
        {
            var downloadUrl = $"/api/pdf/download/{workflowId}/BDR";
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
            Snackbar.Add("BDR PDF wird generiert...", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler: {ex.Message}", Severity.Error);
        }
        finally
        {
            exportingWorkflowIds.Remove(workflowId);
        }
    }

    private async Task ExportSingleBvToPdf(Guid workflowId)
    {
        exportingWorkflowIds.Add(workflowId);

        try
        {
            var downloadUrl = $"/api/pdf/download/{workflowId}/BV";
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
            Snackbar.Add("BV PDF wird generiert...", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler: {ex.Message}", Severity.Error);
        }
        finally
        {
            exportingWorkflowIds.Remove(workflowId);
        }
    }


    /// <summary>
    /// Navigate back to project overview page (app cards)
    /// </summary>
    private void NavigateBack()
    {
        // Always navigate back to the project's app cards page
        Navigation.NavigateTo($"/project/{ProjectId}");
    }

    private bool isProjectArchived => forwardedWorkflows.All(w => w.Status == WorkflowStatus.Archived);
    private bool isReopening = false;

    private async Task ReopenForEditing()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Projekt zur Bearbeitung öffnen",
            "Möchten Sie das Projekt wieder zur Bearbeitung öffnen?",
            yesText: "Ja", noText: "Abbrechen");

        if (result != true) return;

        isReopening = true;
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            foreach (var workflow in forwardedWorkflows)
            {
                workflow.Status = WorkflowStatus.ForwardedToInstallation;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt wurde zur Bearbeitung geöffnet!", Severity.Success);
            await LoadProjectDetails();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Öffnen: {ex.Message}", Severity.Error);
        }
        finally
        {
            isReopening = false;
        }
    }

    // Hardware/Software processing methods
    private OrderDetails GetOrderDetailsForWorkflow(DbWorkflow workflow)
    {
        var orderData = new OrderDetails();

        try
        {
            if (workflow.WorkflowType == WorkflowType.BDR)
            {
                ProcessBdrHardware(workflow, orderData);
            }
            else
            {
                ProcessBvHardware(workflow, orderData);
            }

            ProcessWorkflowSoftware(workflow, orderData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GetOrderDetailsForWorkflow Error: {ex.Message}");
            orderData.Notes = $"Fehler beim Laden der Details: {ex.Message}";
        }

        return orderData;
    }

    private void ProcessBdrHardware(DbWorkflow workflow, OrderDetails orderData)
    {
        if (bdrHardwareCache.TryGetValue(workflow.Id, out var bdrHardware) && bdrHardware != null)
        {
            if (!string.IsNullOrEmpty(bdrHardware.HardwareSpecs))
            {
                orderData.MainHardware = bdrHardware.HardwareSpecs;
            }

            if (!string.IsNullOrEmpty(bdrHardware.Description))
            {
                orderData.HardwareRemarks = bdrHardware.Description;
            }

            if (bdrFieldsCache.TryGetValue(workflow.Id, out var fields))
            {
                var hardwareFields = fields.Where(f => f.FieldType == "Hardware" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in hardwareFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? string.Empty;
                    if (!string.IsNullOrEmpty(value))
                    {
                        orderData.HardwareDetails.Add($"{displayName}: {value}");
                    }
                }

                var additionalFields = fields.Where(f => f.FieldType == "Additional" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in additionalFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? string.Empty;
                    if (!string.IsNullOrEmpty(value))
                    {
                        orderData.AdditionalHardware.Add($"{displayName}: {value}");
                    }
                }
            }
        }
    }

    private void ProcessBvHardware(DbWorkflow workflow, OrderDetails orderData)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            if (!string.IsNullOrEmpty(bvHardware.PcType))
            {
                orderData.MainHardware = bvHardware.PcType;
            }

            if (!string.IsNullOrEmpty(bvHardware.PcTypeDetails))
            {
                var parts = bvHardware.PcTypeDetails.Split('|');

                if (parts.Length > 1 && !string.IsNullOrWhiteSpace(parts[1]))
                {
                    var requirements = parts[1].Split(';', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var req in requirements)
                    {
                        orderData.HardwareDetails.Add(req.Trim());
                    }
                }

                if (parts.Length > 2 && !string.IsNullOrWhiteSpace(parts[2]))
                {
                    orderData.HardwareRemarks = parts[2].Trim();
                }
            }

            if (bvComponentsCache.TryGetValue(workflow.Id, out var components) && components.Any())
            {
                foreach (var component in components)
                {
                    var componentText = component.ComponentName ?? "Unbekannte Komponente";
                    var details = new List<string>();

                    if (!string.IsNullOrEmpty(component.Quantity) && component.Quantity != "1")
                    {
                        details.Add($"{component.Quantity}x");
                    }

                    if (!string.IsNullOrEmpty(component.ComponentType))
                    {
                        details.Add(component.ComponentType);
                    }

                    if (details.Any())
                    {
                        orderData.HardwareDetails.Add($"{componentText} ({string.Join(", ", details)})");
                    }
                    else
                    {
                        orderData.HardwareDetails.Add(componentText);
                    }
                }
            }
        }
    }

    private void ProcessWorkflowSoftware(DbWorkflow workflow, OrderDetails orderData)
    {
        var description = workflow.Description ?? "";
        string softwarePrefix = workflow.WorkflowType == WorkflowType.BDR ? "BDRSOFTWARE:" : "BVSOFTWARE:";
        string remarksPrefix = workflow.WorkflowType == WorkflowType.BDR ? "BDRSOFTWARE_REMARKS:" : "BVSOFTWARE_REMARKS:";

        if (description.Contains(softwarePrefix))
        {
            var startIndex = description.IndexOf(softwarePrefix) + softwarePrefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            string softwareData = endIndex > startIndex
                ? description.Substring(startIndex, endIndex - startIndex)
                : description.Substring(startIndex);

            var softwareItems = ParseSoftwareData(softwareData, workflow.WorkflowType == WorkflowType.BDR);
            var uniqueSoftware = softwareItems.Distinct().ToList();
            orderData.Software.AddRange(uniqueSoftware);
        }

        if (description.Contains(remarksPrefix))
        {
            var startIndex = description.IndexOf(remarksPrefix) + remarksPrefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            orderData.SoftwareRemarks = endIndex > startIndex
                ? description.Substring(startIndex, endIndex - startIndex)
                : description.Substring(startIndex);
        }
    }

    private List<string> ParseSoftwareData(string softwareData, bool isBdr)
    {
        var items = new List<string>();
        if (string.IsNullOrEmpty(softwareData)) return items;

        var entries = softwareData.Split(';');
        foreach (var entry in entries)
        {
            if (!string.IsNullOrEmpty(entry))
            {
                var parts = entry.Split('|');
                var softwareType = parts.Length > 0 ? parts[0].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var note = parts.Length > 1 ? parts[1].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var licenseStr = parts.Length > 2 ? parts[2] : "false";
                var licenseRequired = isBdr && licenseStr.Equals("true", StringComparison.OrdinalIgnoreCase);

                if (!string.IsNullOrWhiteSpace(softwareType))
                {
                    var softwareEntry = softwareType;

                    if (!string.IsNullOrEmpty(note))
                    {
                        softwareEntry += $" (Version: {note})";
                    }

                    if (isBdr && licenseRequired)
                    {
                        softwareEntry += " [Lizenz erforderlich]";
                    }

                    items.Add(softwareEntry);
                }
            }
        }

        return items;
    }

    private string GetContactPersonForBvWorkflow(DbWorkflow workflow)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            return bvHardware.ContactPerson ?? "";
        }
        return "";
    }
    /// <summary>
    /// Save installation notes for individual workflow
    /// </summary>
    private async Task SaveInstallationNotes(Guid workflowId)
    {
        // Prevent saving archived workflows
        if (isProjectArchived)
        {
            Snackbar.Add("Archivierte Projekte können nicht bearbeitet werden!", Severity.Warning);
            return;
        }

        savingWorkflowIds.Add(workflowId);
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            var workflow = forwardedWorkflows.FirstOrDefault(w => w.Id == workflowId);
            if (workflow == null)
            {
                throw new Exception("Workflow nicht gefunden");
            }

            // Additional check for individual workflow status
            if (workflow.Status == WorkflowStatus.Archived)
            {
                throw new Exception("Dieser Workflow ist archiviert und kann nicht bearbeitet werden");
            }

            var existingDescription = workflow.Description ?? "";

            // Remove old installation comment if present
            if (existingDescription.Contains("INSTALLATION_COMMENT:"))
            {
                var startIndex = existingDescription.IndexOf("INSTALLATION_COMMENT:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            // Add new installation comment
            var installComment = GetInstallationComment(workflowId);
            if (!string.IsNullOrWhiteSpace(installComment))
            {
                workflow.Description = existingDescription + $"INSTALLATION_COMMENT:{installComment.Trim()}ENDMEC:";
            }
            else
            {
                workflow.Description = existingDescription;
            }

            workflow.LastChange = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add($"Installations-Notizen für {workflow.Name} gespeichert!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveInstallationNotes Error: {ex}");
        }
        finally
        {
            savingWorkflowIds.Remove(workflowId);
            StateHasChanged();
        }
    }
}