@page "/installation/project/{ProjectId:guid}"
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject InstallationPdfService PdfService
@inject IJSRuntime JSRuntime
@layout ProjectMainLayout


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudStack Spacing="4">
        <MudText Typo="Typo.h4" Color="Color.Secondary" Align="Align.Center">Installation</MudText>

 <!-- Project Header -->
        @if (currentProject != null)
        {
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h4" Color="Color.Primary">@currentProject.ProjectNumber</MudText>
                        <MudText Typo="Typo.h4" Color="Color.Secondary">@currentProject.Name</MudText>
                        @if (!string.IsNullOrWhiteSpace(currentProject.Description))
                        {
                            <MudText Typo="Typo.body2" Color="Color.Tertiary">@currentProject.Description</MudText>
                        }
                    </MudStack>

 <!-- Action Buttons -->
                    <MudStack Row Spacing="3">
                   
                        @if (!isProjectArchived)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Assignment"
                                       OnClick="ReleaseForCorrection"
                                       Loading="@isReleasingForCorrection"
                                       Disabled="@(!forwardedWorkflows.Any() || isReleasingForCorrection)">
                                Zur Korrektur freigeben
                            </MudButton>

                            <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.CheckCircle"
                                       OnClick="CompleteInstallation"
                                       Loading="@isCompletingInstallation"
                                       Disabled="@(!forwardedWorkflows.Any() || isCompletingInstallation)">
                                Installation abgeschlossen
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Color="Color.Warning"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="ReopenForEditing"
                                       Loading="@isReopening"
                                       Disabled="@isReopening">
                                Zur Bearbeitung öffnen
                            </MudButton>
                        }
                    </MudStack>
                </MudStack>
            </MudPaper>
        }

 <!-- Loading -->
        @if (loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }

 <!-- PROJECT STATUS OVERVIEW - IMMER ANZEIGEN -->
        @if (!loading)
        {
            <ProjectStatusOverview ProjectId="@ProjectId" IsLoading="@loading" />
        }

 <!--  Prüfe ob Workflows beim Einkauf sind (zurückgeleitet) -->
        @if (!loading && forwardedWorkflows.Any() && forwardedWorkflows.All(w => w.Status == WorkflowStatus.Completed))
        {
          

 <!-- Project is back at purchase for corrections -->
            <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Filled.Warning">
                <MudText>
                    <strong>Projekt zur Korrektur beim Einkauf</strong><br />
                    Das Projekt muss erst vom Einkauf erneut weitergeleitet werden.
                </MudText>
            </MudAlert>
        }
        else if (!loading && !forwardedWorkflows.Any())
        {
            <MudAlert Severity="Severity.Warning">
                <MudText>Keine Formulare zur Installation für dieses Projekt gefunden.</MudText>
            </MudAlert>
        }
        else if (!loading && forwardedWorkflows.Any())
        {
            var bdrWorkflows = forwardedWorkflows.Where(w => w.WorkflowType == WorkflowType.BDR).OrderBy(w => w.Name).ToList();
            var bvWorkflows = forwardedWorkflows.Where(w => w.WorkflowType == WorkflowType.BV).OrderBy(w => w.Name).ToList();

 <!-- BDR Section Header -->
            @if (bdrWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-2">
                    <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Primary">BDR - Bedienungsrechner (@bdrWorkflows.Count)</MudText>
                    <MudSpacer />
                </MudStack>

 <!-- BDR Installation Forms -->
                @foreach (var workflow in bdrWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);

                    <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-block-end: 4px solid var(--mud-palette-primary);">
                        <MudStack Spacing="3">

 <!-- Workflow Header mit PDF Button -->
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Spacing="2">
                                    <MudButton Color="Color.Primary"
                                               Variant="Variant.Outlined"
                                               StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                               OnClick="ExportAllBdrToPdf"
                                               Loading="@isExportingPdf"
                                               Disabled="@isExportingPdf">
                                        Alle BDR als PDF
                                    </MudButton>
                                </MudStack>

                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                               Color="Color.Primary"
                                               Size="Size.Medium"
                                               OnClick="@(() => ExportSingleBdrToPdf(workflow.Id))"
                                               Title="BDR Installations-PDF"
                                               Loading="@exportingWorkflowIds.Contains(workflow.Id)"
                                               Disabled="@exportingWorkflowIds.Contains(workflow.Id)" />
                            </MudStack>

                            <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                                 WorkflowType="BDR - Bedienungsrechner"
                                                 WorkflowIcon="@Icons.Material.Filled.Computer"
                                                 StatusText="@GetStatusText(workflow)"
                                                 MainHardware="@orderDetails.MainHardware"
                                                 HardwareItems="@orderDetails.HardwareDetails"
                                                 AdditionalHardwareItems="@orderDetails.AdditionalHardware"
                                                 SoftwareItems="@orderDetails.Software"
                                                 Notes="@orderDetails.Notes"
                                                 HardwareRemarks="@orderDetails.HardwareRemarks"
                                                 SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                                 ShowComments="false">
                            </WorkflowDetailsCard>

<!-- Network Configuration Integration -->

                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #f5f5f5 0%, #ffffff 100%); border-left: 4px solid #4caf50; border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.NetworkCheck" Color="Color.Success" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #4caf50; font-weight: 600;">
                                            Netzwerk-Konfiguration
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    <MudGrid Spacing="3">
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Router" Size="Size.Small" Class="mr-1" />
                                                    MAC-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].MacAddress"
                                                              Placeholder="00:00:00:00:00:00"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("HH:HH:HH:HH:HH:HH") { MaskChars = new[] { new MaskChar('H', @"[0-9A-Fa-f]") } })"
                                                              HelperText="Format: XX:XX:XX:XX:XX:XX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" Class="mr-1" />
                                                    IP-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].IpAddress"
                                                              Placeholder="192.168.1.100"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("DDD.DDD.DDD.DDD") { MaskChars = new[] { new MaskChar('D', @"[0-9]") } })"
                                                              HelperText="Format: XXX.XXX.XXX.XXX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>

                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Class="mt-2">
                                        @if (networkConfigSaveStatus.TryGetValue(workflow.Id, out var status))
                                        {
                                            <MudChip T="string"
                                                     Icon="@(status.IsSuccess ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                                     Size="Size.Small"
                                                     Color="@(status.IsSuccess ? Color.Success : Color.Error)"
                                                     OnClose="@(() => ClearSaveStatus(workflow.Id))">
                                                @if (status.IsSuccess)
                                                {
                                                    <text>Gespeichert @status.SaveTime.ToString("HH:mm")</text>
                                                }
                                                else
                                                {
                                                    <text>@status.ErrorMessage</text>
                                                }
                                            </MudChip>
                                        }

                                        <MudButton Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Medium"
                                                   StartIcon="@Icons.Material.Filled.Save"
                                                   OnClick="@(() => SaveIndividualNetworkConfig(workflow.Id))"
                                                   Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                   Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                            Speichern
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
 <!-- Comments Section für BDR -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%); border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Color="Color.Default" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #616161; font-weight: 600;">
                                            Kommentare & Bemerkungen
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    @if (!string.IsNullOrEmpty(GetWorkflowComment(workflow.Id)))
                                    {
                                        <MudStack Spacing="2">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Default" />
                                                <MudText Typo="Typo.subtitle2" Style="color: #757575; font-weight: 600;">
                                                    Kommentar vom Einkauf:
                                                </MudText>
                                            </MudStack>
                                            <MudPaper Class="pa-3" Elevation="0" Style="background-color: #f5f5f5; border-left: 4px solid #9e9e9e; border-radius: 4px;">
                                                <MudText Typo="Typo.body2" Style="color: #424242; line-height: 1.6;">
                                                    @GetWorkflowComment(workflow.Id)
                                                </MudText>
                                            </MudPaper>
                                        </MudStack>
                                    }

                                    <MudStack Spacing="2">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Success" />
                                            <MudText Typo="Typo.subtitle2" Style="color: #4caf50; font-weight: 600;">
                                                Installations-Notizen:
                                            </MudText>
                                        </MudStack>
                                        <MudTextField Value="@GetInstallationComment(workflow.Id)"
                                                      ValueChanged="@((string value) => UpdateInstallationComment(workflow.Id, value))"
                                                      Placeholder="Besondere Vorkommnisse, Probleme, Lösungen während der Installation..."
                                                      Variant="Variant.Outlined"
                                                      Lines="4"
                                                      AutoGrow
                                                      ReadOnly="@isProjectArchived" />

                                        <MudStack Row Justify="Justify.FlexEnd">
                                            <MudButton Color="Color.Success"
                                                       Variant="Variant.Filled"
                                                       Size="Size.Medium"
                                                       StartIcon="@Icons.Material.Filled.Save"
                                                       OnClick="@(() => SaveInstallationNotes(workflow.Id))"
                                                       Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                       Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                                Speichern
                                            </MudButton>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                }
            }

 <!-- BV Section -->
            @if (bvWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-6">
                    <MudIcon Icon="@Icons.Material.Filled.CameraAlt" Color="Color.Secondary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary">BV - Bildverarbeitungsrechner (@bvWorkflows.Count)</MudText>
                    <MudSpacer />
                </MudStack>

 <!-- BV Installation Forms -->
                @foreach (var workflow in bvWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);
                    var contactPerson = GetContactPersonForBvWorkflow(workflow);

                    <MudPaper Class="pa-4 mb-4" Elevation="2" Style="border-block-end: 4px solid var(--mud-palette-secondary);">
                        <MudStack Spacing="3">

  <!-- Workflow Header mit PDF Button -->
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Spacing="2">
                                    <MudButton Color="Color.Secondary"
                                               Variant="Variant.Outlined"
                                               StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                               OnClick="ExportAllBvToPdf"
                                               Loading="@isExportingPdf"
                                               Disabled="@isExportingPdf">
                                        Alle BV als PDF
                                    </MudButton>
                                </MudStack>

                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                               Color="Color.Secondary"
                                               Size="Size.Medium"
                                               OnClick="@(() => ExportSingleBvToPdf(workflow.Id))"
                                               Title="BV Installations-PDF"
                                               Loading="@exportingWorkflowIds.Contains(workflow.Id)"
                                               Disabled="@exportingWorkflowIds.Contains(workflow.Id)" />
                            </MudStack>

                            <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                                 WorkflowType="BV - Bildverarbeitungsrechner"
                                                 WorkflowIcon="@Icons.Material.Filled.CameraAlt"
                                                 StatusText="@GetStatusText(workflow)"
                                                 MainHardware="@orderDetails.MainHardware"
                                                 HardwareItems="@orderDetails.HardwareDetails"
                                                 AdditionalHardwareItems="@orderDetails.AdditionalHardware"
                                                 SoftwareItems="@orderDetails.Software"
                                                 Notes="@orderDetails.Notes"
                                                 ContactPerson="@contactPerson"
                                                 HardwareRemarks="@orderDetails.HardwareRemarks"
                                                 SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                                 ShowComments="false">
                            </WorkflowDetailsCard>

 <!-- Network Configuration Integration -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #f5f5f5 0%, #ffffff 100%); border-left: 4px solid #4caf50; border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.NetworkCheck" Color="Color.Success" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #4caf50; font-weight: 600;">
                                            Netzwerk-Konfiguration
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    <MudGrid Spacing="3">
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Router" Size="Size.Small" Class="mr-1" />
                                                    MAC-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].MacAddress"
                                                              Placeholder="00:00:00:00:00:00"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("HH:HH:HH:HH:HH:HH") { MaskChars = new[] { new MaskChar('H', @"[0-9A-Fa-f]") } })"
                                                              HelperText="Format: XX:XX:XX:XX:XX:XX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body2" Style="color: #666; font-weight: 500;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" Class="mr-1" />
                                                    IP-Adresse
                                                </MudText>
                                                <MudTextField @bind-Value="@networkConfigurations[workflow.Id].IpAddress"
                                                              Placeholder="192.168.1.100"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              Mask="@(new PatternMask("DDD.DDD.DDD.DDD") { MaskChars = new[] { new MaskChar('D', @"[0-9]") } })"
                                                              HelperText="Format: XXX.XXX.XXX.XXX"
                                                              ReadOnly="@isProjectArchived" />
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>

                                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.FlexEnd" Class="mt-2">
                                        @if (networkConfigSaveStatus.TryGetValue(workflow.Id, out var bvStatus))
                                        {
                                            <MudChip T="string"
                                                     Icon="@(bvStatus.IsSuccess ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                                                     Size="Size.Small"
                                                     Color="@(bvStatus.IsSuccess ? Color.Success : Color.Error)"
                                                     OnClose="@(() => ClearSaveStatus(workflow.Id))">
                                                @if (bvStatus.IsSuccess)
                                                {
                                                    <text>Gespeichert @bvStatus.SaveTime.ToString("HH:mm")</text>
                                                }
                                                else
                                                {
                                                    <text>@bvStatus.ErrorMessage</text>
                                                }
                                            </MudChip>
                                        }

                                        <MudButton Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   Size="Size.Medium"
                                                   StartIcon="@Icons.Material.Filled.Save"
                                                   OnClick="@(() => SaveIndividualNetworkConfig(workflow.Id))"
                                                   Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                   Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                            Speichern
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>

  <!-- Comments Section für BV -->
                            <MudPaper Elevation="1" Class="pa-4 mt-3" Style="background: linear-gradient(135deg, #fafafa 0%, #ffffff 100%); border-radius: 8px;">
                                <MudStack Spacing="3">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Color="Color.Default" Size="Size.Medium" />
                                        <MudText Typo="Typo.h6" Style="color: #616161; font-weight: 600;">
                                            Kommentare & Bemerkungen
                                        </MudText>
                                    </MudStack>

                                    <MudDivider />

                                    @if (!string.IsNullOrEmpty(GetWorkflowComment(workflow.Id)))
                                    {
                                        <MudStack Spacing="2">
                                            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Size="Size.Small" Color="Color.Default" />
                                                <MudText Typo="Typo.subtitle2" Style="color: #757575; font-weight: 600;">
                                                    Kommentar vom Einkauf:
                                                </MudText>
                                            </MudStack>
                                            <MudPaper Class="pa-3" Elevation="0" Style="background-color: #f5f5f5; border-left: 4px solid #9e9e9e; border-radius: 4px;">
                                                <MudText Typo="Typo.body2" Style="color: #424242; line-height: 1.6;">
                                                    @GetWorkflowComment(workflow.Id)
                                                </MudText>
                                            </MudPaper>
                                        </MudStack>
                                    }

                                    <MudStack Spacing="2">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Success" />
                                            <MudText Typo="Typo.subtitle2" Style="color: #4caf50; font-weight: 600;">
                                                Installations-Notizen:
                                            </MudText>
                                        </MudStack>
                                        <MudTextField Value="@GetInstallationComment(workflow.Id)"
                                                      ValueChanged="@((string value) => UpdateInstallationComment(workflow.Id, value))"
                                                      Placeholder="Besondere Vorkommnisse, Probleme, Lösungen während der Installation..."
                                                      Variant="Variant.Outlined"
                                                      Lines="4"
                                                      AutoGrow
                                                      ReadOnly="@isProjectArchived" />

                                        <MudStack Row Justify="Justify.FlexEnd">
                                            <MudButton Color="Color.Success"
                                                       Variant="Variant.Filled"
                                                       Size="Size.Medium"
                                                       StartIcon="@Icons.Material.Filled.Save"
                                                       OnClick="@(() => SaveInstallationNotes(workflow.Id))"
                                                       Loading="@savingWorkflowIds.Contains(workflow.Id)"
                                                       Disabled="@(savingWorkflowIds.Contains(workflow.Id) || isProjectArchived)">
                                                Speichern
                                            </MudButton>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    </MudPaper>
                }
            }

 <!-- Summary -->
            <MudPaper Class="pa-4 mt-4 mb-4" Elevation="1" Style="background-color: var(--mud-palette-background-grey);">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Primary">@bdrWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BDR Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Secondary">@bvWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BV Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Success">@(bdrWorkflows.Count + bvWorkflows.Count)</MudText>
                            <MudText Typo="Typo.caption">Gesamt</MudText>
                        </MudStack>
                    </MudStack>
                    <MudText Typo="Typo.body1" Color="Color.Success" Class="font-weight-bold">
                        Bereit für Installation
                    </MudText>
                </MudStack>
            </MudPaper>
        }

 <!-- Back Button -->
        <MudButton Variant="Variant.Text"
                   Size="Size.Small"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   FullWidth="true"
                   OnClick="NavigateBack"
                   Class="mt-4">
            Zurück zur Projektübersicht
        </MudButton>

    </MudStack>
</MudContainer>

@code {
    [Parameter] public Guid ProjectId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    // State variables
    private DbProject? currentProject;
    private List<DbWorkflow> forwardedWorkflows = new();
    private bool loading = true;
    private bool isCompletingInstallation = false;
    private bool isReleasingForCorrection = false;
    private bool isExportingPdf = false;
    private HashSet<Guid> exportingWorkflowIds = new();
    private HashSet<Guid> savingWorkflowIds = new();
    private Dictionary<Guid, SaveStatus> networkConfigSaveStatus = new();

    // Comments from purchase department (read-only display)
    private Dictionary<Guid, string> workflowComments = new();

    // Installation comments (editable by installation team)
    private Dictionary<Guid, string> installationComments = new();

    // Network configurations per workflow
    private Dictionary<Guid, NetworkConfiguration> networkConfigurations = new();

    // Data caches for performance
    private Dictionary<Guid, DbHardwareComputer?> bdrHardwareCache = new();
    private Dictionary<Guid, List<DbHardwareField>> bdrFieldsCache = new();
    private Dictionary<Guid, DbBvHardwareComputer?> bvHardwareCache = new();
    private Dictionary<Guid, List<DbBvHardwareComponent>> bvComponentsCache = new();

    // Check if project is archived (read-only mode)
    private bool isProjectArchived => forwardedWorkflows.All(w => w.Status == WorkflowStatus.Archived);
    private bool isReopening = false;

    // ==================== LIFECYCLE METHODS ====================

    // Component initialization - load all project data
    protected override async Task OnInitializedAsync()
    {
        await LoadProjectDetails();
    }

    // ==================== DATA LOADING ====================

    // Load project and workflows forwarded to installation
    private async Task LoadProjectDetails()
    {
        loading = true;
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            currentProject = await context.Project
                .Include(p => p.Workflows)
                .FirstOrDefaultAsync(p => p.Id == ProjectId);

            if (currentProject == null)
            {
                Snackbar.Add("Projekt nicht gefunden!", Severity.Error);
                return;
            }

            // Load workflows at installation stage
            forwardedWorkflows = currentProject.Workflows
                .Where(w => w.Status == WorkflowStatus.ForwardedToInstallation ||
                           w.Status == WorkflowStatus.Archived ||
                           w.Status == WorkflowStatus.Completed)
                .OrderBy(w => w.WorkflowType)
                .ThenBy(w => w.Name)
                .ToList();

            var atInstallation = forwardedWorkflows.Any(w =>
                w.Status == WorkflowStatus.ForwardedToInstallation ||
                w.Status == WorkflowStatus.Archived);

            // Check if workflows are back at purchase
            if (!atInstallation && forwardedWorkflows.Any(w => w.Status == WorkflowStatus.Completed))
            {
                return;
            }

            if (!forwardedWorkflows.Any())
            {
                Snackbar.Add("Keine Formulare zur Installation für dieses Projekt gefunden.", Severity.Info);
                return;
            }

            // Load detailed data only when actually at installation
            if (atInstallation)
            {
                await LoadDetailedData();
                await LoadNetworkConfigurations();
                LoadWorkflowComments();
                LoadInstallationComments();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden des Projekts: {ex.Message}", Severity.Error);
            Console.WriteLine($"LoadProjectDetails Error: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    // Load detailed hardware and software data
    private async Task LoadDetailedData()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            // Load BDR hardware with fields
            var bdrWorkflowIds = forwardedWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BDR)
                .Select(w => w.Id)
                .ToList();

            if (bdrWorkflowIds.Any())
            {
                var bdrHardwareWithFields = await context.HardwareComputer
                    .Include(h => h.HardwareFields.Where(f => f.IsActive))
                    .Where(h => bdrWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bdrHardwareWithFields)
                {
                    bdrHardwareCache[hardware.WorkflowId] = hardware;
                    bdrFieldsCache[hardware.WorkflowId] = hardware.HardwareFields.OrderBy(f => f.DisplayOrder).ToList();
                }
            }

            // Load BV hardware with components
            var bvWorkflowIds = forwardedWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BV)
                .Select(w => w.Id)
                .ToList();

            if (bvWorkflowIds.Any())
            {
                var bvHardwareWithComponents = await context.BvHardwareComputer
                    .Include(h => h.HardwareComponents.Where(c => c.IsActive))
                    .Where(h => bvWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bvHardwareWithComponents)
                {
                    bvHardwareCache[hardware.WorkflowId] = hardware;
                    bvComponentsCache[hardware.WorkflowId] = hardware.HardwareComponents.ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadDetailedData Error: {ex}");
        }
    }

    // Load network configurations from database
    private async Task LoadNetworkConfigurations()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            var workflowIds = forwardedWorkflows.Select(w => w.Id).ToList();
            var configs = await context.InstallationConfiguration
                .Where(c => workflowIds.Contains(c.WorkflowId))
                .ToListAsync();

            foreach (var workflow in forwardedWorkflows)
            {
                var config = configs.FirstOrDefault(c => c.WorkflowId == workflow.Id);
                if (config != null)
                {
                    networkConfigurations[workflow.Id] = new NetworkConfiguration
                    {
                        MacAddress = config.MacAddress ?? "",
                        IpAddress = config.IpAddress ?? "",
                    };
                }
                else
                {
                    networkConfigurations[workflow.Id] = new NetworkConfiguration();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadNetworkConfigurations Error: {ex}");
            foreach (var workflow in forwardedWorkflows)
            {
                networkConfigurations[workflow.Id] = new NetworkConfiguration();
            }
        }
    }

    // Load purchase comments from workflow descriptions (read-only)
    private void LoadWorkflowComments()
    {
        foreach (var workflow in forwardedWorkflows)
        {
            var comment = ParseWorkflowComment(workflow.Description ?? "", "PURCHASE_COMMENT:");
            workflowComments[workflow.Id] = comment;
        }
    }

    // Load installation comments from workflow descriptions
    private void LoadInstallationComments()
    {
        foreach (var workflow in forwardedWorkflows)
        {
            var comment = ParseWorkflowComment(workflow.Description ?? "", "INSTALLATION_COMMENT:");
            installationComments[workflow.Id] = comment;
        }
    }

    // Parse encoded comment from workflow description
    private string ParseWorkflowComment(string description, string prefix)
    {
        if (string.IsNullOrEmpty(description) || !description.Contains(prefix))
            return "";

        try
        {
            var startIndex = description.IndexOf(prefix) + prefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            if (endIndex > startIndex)
            {
                return description.Substring(startIndex, endIndex - startIndex);
            }
            else if (startIndex < description.Length)
            {
                return description.Substring(startIndex);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ParseWorkflowComment Error: {ex.Message}");
        }

        return "";
    }

    // ==================== NETWORK CONFIGURATION - SEGMENTED INPUT ====================

    // Get MAC address segment (0-5)
    private string GetMacSegment(Guid workflowId, int segmentIndex)
    {
        if (!networkConfigurations.TryGetValue(workflowId, out var config))
            return "";

        var segments = config.MacAddress.Split(':');
        return segmentIndex < segments.Length ? segments[segmentIndex] : "";
    }

    // Update MAC address segment
    private void UpdateMacSegment(Guid workflowId, int segmentIndex, string value)
    {
        if (!networkConfigurations.ContainsKey(workflowId))
            networkConfigurations[workflowId] = new NetworkConfiguration();

        // Only allow hexadecimal characters
        value = new string(value.Where(c => "0123456789ABCDEFabcdef".Contains(c)).ToArray()).ToUpper();
        if (value.Length > 2) value = value.Substring(0, 2);

        var config = networkConfigurations[workflowId];
        var segments = config.MacAddress.Split(':').ToList();

        while (segments.Count < 6) segments.Add("");

        segments[segmentIndex] = value;
        config.MacAddress = string.Join(":", segments);

        // Auto-focus next field if current is complete
        if (value.Length == 2 && segmentIndex < 5)
        {
            _ = JSRuntime.InvokeVoidAsync("focusElement", $"mac-{workflowId}-{segmentIndex + 1}");
        }
    }

    // Get IP address segment (0-3)
    private string GetIpSegment(Guid workflowId, int segmentIndex)
    {
        if (!networkConfigurations.TryGetValue(workflowId, out var config))
            return "";

        var segments = config.IpAddress.Split('.');
        return segmentIndex < segments.Length ? segments[segmentIndex] : "";
    }

    // Update IP address segment
    private void UpdateIpSegment(Guid workflowId, int segmentIndex, string value)
    {
        if (!networkConfigurations.ContainsKey(workflowId))
            networkConfigurations[workflowId] = new NetworkConfiguration();

        // Only allow numeric characters
        value = new string(value.Where(char.IsDigit).ToArray());

        // Validate IP segment (0-255)
        if (int.TryParse(value, out int numValue))
        {
            if (numValue > 255) value = "255";
        }

        if (value.Length > 3) value = value.Substring(0, 3);

        var config = networkConfigurations[workflowId];
        var segments = config.IpAddress.Split('.').ToList();

        while (segments.Count < 4) segments.Add("");

        segments[segmentIndex] = value;
        config.IpAddress = string.Join(".", segments);

        // Auto-focus next field if current is complete (3 digits or value is 255)
        if ((value.Length == 3 || (int.TryParse(value, out int v) && v >= 100)) && segmentIndex < 3)
        {
            _ = JSRuntime.InvokeVoidAsync("focusElement", $"ip-{workflowId}-{segmentIndex + 1}");
        }
    }

    // ==================== NETWORK CONFIGURATION ====================

    // Save network configuration for individual workflow
    private async Task SaveIndividualNetworkConfig(Guid workflowId)
    {
        if (isProjectArchived)
        {
            Snackbar.Add("Archivierte Projekte können nicht bearbeitet werden!", Severity.Warning);
            return;
        }

        networkConfigSaveStatus.Remove(workflowId);
        savingWorkflowIds.Add(workflowId);
        StateHasChanged();

        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            var workflow = await context.Workflow.FindAsync(workflowId);
            if (workflow == null)
            {
                throw new Exception("Workflow nicht gefunden");
            }

            if (workflow.Status == WorkflowStatus.Archived)
            {
                throw new Exception("Dieser Workflow ist archiviert und kann nicht bearbeitet werden");
            }

            // Load or create network configuration
            var config = await context.InstallationConfiguration
                .FirstOrDefaultAsync(c => c.WorkflowId == workflowId);

            var networkConfig = networkConfigurations[workflowId];

            if (config == null)
            {
                config = new DbInstallationConfiguration
                {
                    Id = Guid.NewGuid(),
                    WorkflowId = workflowId,
                    MacAddress = networkConfig.MacAddress,
                    IpAddress = networkConfig.IpAddress,
                    CreationDate = DateTime.UtcNow,
                    LastChange = DateTime.UtcNow
                };
                context.InstallationConfiguration.Add(config);
            }
            else
            {
                config.MacAddress = networkConfig.MacAddress;
                config.IpAddress = networkConfig.IpAddress;
                config.LastChange = DateTime.UtcNow;
            }

            // Update installation comment in workflow description
            var existingDescription = workflow.Description ?? "";

            if (existingDescription.Contains("INSTALLATION_COMMENT:"))
            {
                var startIndex = existingDescription.IndexOf("INSTALLATION_COMMENT:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            var installComment = GetInstallationComment(workflowId);
            if (!string.IsNullOrWhiteSpace(installComment))
            {
                workflow.Description = existingDescription + $"INSTALLATION_COMMENT:{installComment.Trim()}ENDMEC:";
            }

            workflow.LastChange = DateTime.UtcNow;

            await context.SaveChangesAsync();
            await transaction.CommitAsync();

            networkConfigSaveStatus[workflowId] = new SaveStatus
            {
                IsSuccess = true,
                SaveTime = DateTime.Now
            };

            Snackbar.Add($"Netzwerk-Konfiguration für {workflow.Name} gespeichert!", Severity.Success);
        }
        catch (Exception ex)
        {
            networkConfigSaveStatus[workflowId] = new SaveStatus
            {
                IsSuccess = false,
                ErrorMessage = ex.Message
            };

            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveIndividualNetworkConfig Error: {ex}");
        }
        finally
        {
            savingWorkflowIds.Remove(workflowId);
            StateHasChanged();
        }
    }

    // Clear save status notification for workflow
    private void ClearSaveStatus(Guid workflowId)
    {
        networkConfigSaveStatus.Remove(workflowId);
    }

    // ==================== COMMENT MANAGEMENT ====================

    // Get purchase comment (from purchase department)
    private string GetWorkflowComment(Guid workflowId)
    {
        return workflowComments.TryGetValue(workflowId, out var comment) ? comment : "";
    }

    // Get installation comment
    private string GetInstallationComment(Guid workflowId)
    {
        return installationComments.TryGetValue(workflowId, out var comment) ? comment : "";
    }

    // Update installation comment in memory (not saved yet)
    private void UpdateInstallationComment(Guid workflowId, string comment)
    {
        installationComments[workflowId] = comment ?? "";
    }

    // Save installation notes for individual workflow
    private async Task SaveInstallationNotes(Guid workflowId)
    {
        if (isProjectArchived)
        {
            Snackbar.Add("Archivierte Projekte können nicht bearbeitet werden!", Severity.Warning);
            return;
        }

        savingWorkflowIds.Add(workflowId);
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            var workflow = await context.Workflow.FindAsync(workflowId);
            if (workflow == null)
            {
                throw new Exception("Workflow nicht gefunden");
            }

            if (workflow.Status == WorkflowStatus.Archived)
            {
                throw new Exception("Dieser Workflow ist archiviert und kann nicht bearbeitet werden");
            }

            // Update workflow description with encoded installation comment
            var existingDescription = workflow.Description ?? "";

            if (existingDescription.Contains("INSTALLATION_COMMENT:"))
            {
                var startIndex = existingDescription.IndexOf("INSTALLATION_COMMENT:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            var installComment = GetInstallationComment(workflowId);
            if (!string.IsNullOrWhiteSpace(installComment))
            {
                workflow.Description = existingDescription + $"INSTALLATION_COMMENT:{installComment.Trim()}ENDMEC:";
            }
            else
            {
                workflow.Description = existingDescription;
            }

            workflow.LastChange = DateTime.UtcNow;

            await context.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add($"Installations-Notizen für {workflow.Name} gespeichert!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveInstallationNotes Error: {ex}");
        }
        finally
        {
            savingWorkflowIds.Remove(workflowId);
            StateHasChanged();
        }
    }

    // ==================== WORKFLOW ACTIONS ====================

    // Release project back to purchase for corrections
    private async Task ReleaseForCorrection()
    {
        if (!forwardedWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zur Freigabe vorhanden!", Severity.Warning);
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Zur Korrektur freigeben",
            markupMessage: new MarkupString($@"
            <div style='line-height: 1.6;'>
                <div style='margin-bottom: 16px;'>
                    Möchten Sie das Projekt zur Korrektur freigeben?
                </div>

                <div style='margin-bottom: 8px; font-weight: 600; color: #1976d2;'>
                    Projekt:
                </div>
                <div style='margin-bottom: 16px; font-weight: 500;'>
                    {currentProject?.ProjectNumber} - {currentProject?.Name}
                </div>

                <div style='color: #ff9800; font-weight: 500; display: flex; align-items: center; gap: 8px;'>
                    <span style='font-size: 18px;'>📝</span>
                    <span>Das Projekt geht zurück zum Einkauf.</span>
                </div>
            </div>
        "),
            "Freigeben",
            "Abbrechen"
        );

        if (result != true) return;

        isReleasingForCorrection = true;
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            var workflowIds = forwardedWorkflows.Select(w => w.Id).ToList();
            var workflowsToUpdate = await context.Workflow
                .Where(w => workflowIds.Contains(w.Id))
                .ToListAsync();

            // Set workflows back to Completed status (at purchase)
            foreach (var workflow in workflowsToUpdate)
            {
                workflow.Status = WorkflowStatus.Completed;
                workflow.LastChange = DateTime.UtcNow;
            }

            await context.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt erfolgreich zur Korrektur freigegeben!", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo($"/project/{ProjectId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Freigeben: {ex.Message}", Severity.Error);
            Console.WriteLine($"ReleaseForCorrection Error: {ex}");
        }
        finally
        {
            isReleasingForCorrection = false;
        }
    }

    // Complete installation and archive project
    private async Task CompleteInstallation()
    {
        if (!forwardedWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zum Abschließen vorhanden!", Severity.Warning);
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Installation abschließen",
            markupMessage: new MarkupString($@"
            <div style='line-height: 1.6;'>
                <div style='margin-bottom: 16px;'>
                    Möchten Sie die Installation abschließen?
                </div>

                <div style='margin-bottom: 8px; font-weight: 600; color: #1976d2;'>
                    Projekt:
                </div>
                <div style='margin-bottom: 16px; font-weight: 500;'>
                    {currentProject?.ProjectNumber} - {currentProject?.Name}
                </div>

                <div style='color: #4caf50; font-weight: 500; display: flex; align-items: center; gap: 8px;'>
                    <span style='font-size: 18px;'>✅</span>
                    <span>Das Projekt wird als vollständig installiert markiert.</span>
                </div>
            </div>
        "),
            yesText: "Abschließen",
            noText: "Abbrechen"
        );

        if (result != true) return;

        isCompletingInstallation = true;
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            var workflowIds = forwardedWorkflows.Select(w => w.Id).ToList();
            var workflowsToUpdate = await context.Workflow
                .Where(w => workflowIds.Contains(w.Id))
                .ToListAsync();

            // Archive all workflows
            foreach (var workflow in workflowsToUpdate)
            {
                workflow.Status = WorkflowStatus.Archived;
                workflow.LastChange = DateTime.UtcNow;
            }

            await context.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Installation erfolgreich abgeschlossen!", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo($"/project/{ProjectId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Abschließen: {ex.Message}", Severity.Error);
            Console.WriteLine($"CompleteInstallation Error: {ex}");
        }
        finally
        {
            isCompletingInstallation = false;
        }
    }

    // Reopen archived project for editing
    private async Task ReopenForEditing()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Projekt zur Bearbeitung öffnen",
            "Möchten Sie das Projekt wieder zur Bearbeitung öffnen?",
            "Öffnen",
            "Abbrechen"
        );

        if (result != true) return;

        isReopening = true;
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            using var transaction = await context.Database.BeginTransactionAsync();

            var workflowIds = forwardedWorkflows.Select(w => w.Id).ToList();
            var workflowsToUpdate = await context.Workflow
                .Where(w => workflowIds.Contains(w.Id))
                .ToListAsync();

            // Reopen workflows from Archived to ForwardedToInstallation
            foreach (var workflow in workflowsToUpdate)
            {
                workflow.Status = WorkflowStatus.ForwardedToInstallation;
                workflow.LastChange = DateTime.UtcNow;
            }

            await context.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt erfolgreich zur Bearbeitung geöffnet!", Severity.Success);

            await Task.Delay(1000);
            await LoadProjectDetails();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Öffnen: {ex.Message}", Severity.Error);
            Console.WriteLine($"ReopenForEditing Error: {ex}");
        }
        finally
        {
            isReopening = false;
        }
    }

    // ==================== PDF EXPORT ====================

    // Export all BDR workflows to PDF
    private async Task ExportAllBdrToPdf()
    {
        isExportingPdf = true;
        try
        {
            var result = await PdfService.GenerateAllBdrPdfsAsync(ProjectId);

            if (result.IsSuccess && result.PdfData != null)
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", result.FileName, Convert.ToBase64String(result.PdfData));
                Snackbar.Add("PDF erfolgreich erstellt!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Fehler: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Erstellen des PDFs: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExportingPdf = false;
        }
    }

    // Export single BDR workflow to PDF
    private async Task ExportSingleBdrToPdf(Guid workflowId)
    {
        exportingWorkflowIds.Add(workflowId);
        try
        {
            var result = await PdfService.GenerateBdrPdfAsync(workflowId);

            if (result.IsSuccess && result.PdfData != null)
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", result.FileName, Convert.ToBase64String(result.PdfData));
                Snackbar.Add("PDF erfolgreich erstellt!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Fehler: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Erstellen des PDFs: {ex.Message}", Severity.Error);
        }
        finally
        {
            exportingWorkflowIds.Remove(workflowId);
        }
    }

    // Export all BV workflows to PDF
    private async Task ExportAllBvToPdf()
    {
        isExportingPdf = true;
        try
        {
            var result = await PdfService.GenerateAllBvPdfsAsync(ProjectId);

            if (result.IsSuccess && result.PdfData != null)
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", result.FileName, Convert.ToBase64String(result.PdfData));
                Snackbar.Add("PDF erfolgreich erstellt!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Fehler: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Erstellen des PDFs: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExportingPdf = false;
        }
    }

    // Export single BV workflow to PDF
    private async Task ExportSingleBvToPdf(Guid workflowId)
    {
        exportingWorkflowIds.Add(workflowId);
        try
        {
            var result = await PdfService.GenerateBvPdfAsync(workflowId);

            if (result.IsSuccess && result.PdfData != null)
            {
                await JSRuntime.InvokeVoidAsync("downloadFile", result.FileName, Convert.ToBase64String(result.PdfData));
                Snackbar.Add("PDF erfolgreich erstellt!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Fehler: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Erstellen des PDFs: {ex.Message}", Severity.Error);
        }
        finally
        {
            exportingWorkflowIds.Remove(workflowId);
        }
    }

    // ==================== DATA PROCESSING ====================

    // Get formatted order details for display
    private (string MainHardware, List<string> HardwareDetails, List<string> AdditionalHardware, List<string> Software, string Notes, string HardwareRemarks, string SoftwareRemarks) GetOrderDetailsForWorkflow(DbWorkflow workflow)
    {
        var mainHardware = "";
        var hardwareDetails = new List<string>();
        var additionalHardware = new List<string>();
        var software = new List<string>();
        var notes = "";
        var hardwareRemarks = "";
        var softwareRemarks = "";

        try
        {
            if (workflow.WorkflowType == WorkflowType.BDR)
            {
                ProcessBdrHardware(workflow, ref mainHardware, ref hardwareDetails, ref additionalHardware, ref hardwareRemarks);
            }
            else
            {
                ProcessBvHardware(workflow, ref mainHardware, ref hardwareDetails, ref additionalHardware, ref hardwareRemarks);
            }

            ProcessWorkflowSoftware(workflow, ref software, ref softwareRemarks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GetOrderDetailsForWorkflow Error: {ex.Message}");
            notes = $"Fehler beim Laden der Details: {ex.Message}";
        }

        return (mainHardware, hardwareDetails, additionalHardware, software, notes, hardwareRemarks, softwareRemarks);
    }

    // Process BDR hardware data for display
    private void ProcessBdrHardware(DbWorkflow workflow, ref string mainHardware, ref List<string> hardwareDetails, ref List<string> additionalHardware, ref string hardwareRemarks)
    {
        if (bdrHardwareCache.TryGetValue(workflow.Id, out var bdrHardware) && bdrHardware != null)
        {
            if (!string.IsNullOrEmpty(bdrHardware.HardwareSpecs))
            {
                mainHardware = bdrHardware.HardwareSpecs;
            }

            if (!string.IsNullOrEmpty(bdrHardware.Description))
            {
                hardwareRemarks = bdrHardware.Description;
            }

            if (bdrFieldsCache.TryGetValue(workflow.Id, out var fields))
            {
                var hardwareFields = fields.Where(f => f.FieldType == "Hardware" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in hardwareFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? "";
                    if (!string.IsNullOrEmpty(value))
                    {
                        hardwareDetails.Add($"{displayName}: {value}");
                    }
                }

                var additionalFields = fields.Where(f => f.FieldType == "Additional" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in additionalFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? "";
                    if (!string.IsNullOrEmpty(value))
                    {
                        additionalHardware.Add($"{displayName}: {value}");
                    }
                }
            }
        }
    }

    // Process BV hardware data for display
    private void ProcessBvHardware(DbWorkflow workflow, ref string mainHardware, ref List<string> hardwareDetails, ref List<string> additionalHardware, ref string hardwareRemarks)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            if (!string.IsNullOrEmpty(bvHardware.PcType))
            {
                mainHardware = bvHardware.PcType;
            }

            if (!string.IsNullOrEmpty(bvHardware.Description))
            {
                hardwareRemarks = bvHardware.Description;
            }

            if (bvComponentsCache.TryGetValue(workflow.Id, out var components))
            {
                var selectedComponents = components.Where(c => c.IsSelected).ToList();
                foreach (var component in selectedComponents)
                {
                    var componentName = component.ComponentName ?? "";
                    var quantity = component.Quantity ?? "1";
                    var componentType = component.ComponentType ?? "";

                    if (!string.IsNullOrEmpty(componentName))
                    {
                        var detail = $"{componentName} ({quantity}x)";
                        if (!string.IsNullOrEmpty(componentType))
                        {
                            detail += $" - {componentType}";
                        }
                        hardwareDetails.Add(detail);
                    }
                }
            }
        }
    }

    // Process software data for display
    private void ProcessWorkflowSoftware(DbWorkflow workflow, ref List<string> items, ref string softwareRemarks)
    {
        bool isBdr = workflow.WorkflowType == WorkflowType.BDR;
        string softwarePrefix = isBdr ? "BDRSOFTWARE:" : "BVSOFTWARE:";

        if (!string.IsNullOrEmpty(workflow.Description) && workflow.Description.Contains(softwarePrefix))
        {
            var startIndex = workflow.Description.IndexOf(softwarePrefix) + softwarePrefix.Length;
            var endIndex = workflow.Description.IndexOf("ENDMEC:", startIndex);

            string softwareData = endIndex > startIndex
                ? workflow.Description.Substring(startIndex, endIndex - startIndex)
                : workflow.Description.Substring(startIndex);

            var entries = softwareData.Split(';');
            foreach (var entry in entries)
            {
                if (!string.IsNullOrEmpty(entry))
                {
                    var parts = entry.Split('|');
                    var softwareType = parts.Length > 0 ? parts[0].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                    var note = parts.Length > 1 ? parts[1].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                    var licenseStr = parts.Length > 2 ? parts[2] : "false";
                    var licenseRequired = isBdr && licenseStr.Equals("true", StringComparison.OrdinalIgnoreCase);

                    if (!string.IsNullOrWhiteSpace(softwareType))
                    {
                        var softwareEntry = softwareType;

                        if (!string.IsNullOrEmpty(note))
                        {
                            softwareEntry += $" (Version: {note})";
                        }

                        if (isBdr && licenseRequired)
                        {
                            softwareEntry += " [Lizenz erforderlich]";
                        }

                        items.Add(softwareEntry);
                    }
                }
            }
        }

        // Extract software remarks
        string remarksPrefix = isBdr ? "BDRSOFTWARE_REMARKS:" : "BVSOFTWARE_REMARKS:";
        if (!string.IsNullOrEmpty(workflow.Description) && workflow.Description.Contains(remarksPrefix))
        {
            var startIndex = workflow.Description.IndexOf(remarksPrefix) + remarksPrefix.Length;
            var endIndex = workflow.Description.IndexOf("ENDMEC:", startIndex);

            if (endIndex > startIndex)
            {
                softwareRemarks = workflow.Description.Substring(startIndex, endIndex - startIndex);
            }
            else if (startIndex < workflow.Description.Length)
            {
                softwareRemarks = workflow.Description.Substring(startIndex);
            }
        }
    }

    // Get contact person for BV workflow
    private string GetContactPersonForBvWorkflow(DbWorkflow workflow)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            return bvHardware.ContactPerson ?? "";
        }
        return "";
    }

    // ==================== HELPER METHODS ====================

    // Get status text for workflow display
    private string GetStatusText(DbWorkflow workflow) => workflow.Status switch
    {
        WorkflowStatus.Created => "Neu",
        WorkflowStatus.HardwareInProgress => "HW läuft",
        WorkflowStatus.SoftwareInProgress => "SW läuft",
        WorkflowStatus.SoftwareCompleted => "Bereit für Einkauf",
        WorkflowStatus.Completed => "Beim Einkauf",
        WorkflowStatus.ForwardedToInstallation => "Bei Installation",
        WorkflowStatus.Archived => "Abgeschlossen",
        _ => "Unbekannt"
    };

    // ==================== NAVIGATION ====================

    // Navigate back to project overview page
    private void NavigateBack()
    {
        Navigation.NavigateTo($"/project/{ProjectId}", forceLoad: true);
    }

    // ==================== HELPER CLASSES ====================

    private class SaveStatus
    {
        public bool IsSuccess { get; set; }
        public DateTime SaveTime { get; set; }
        public string ErrorMessage { get; set; } = "";
    }

    private class NetworkConfiguration
    {
        public string MacAddress { get; set; } = "";
        public string IpAddress { get; set; } = "";
    }
}