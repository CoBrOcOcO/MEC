@using MECWeb.Components.Shared.Project
@using MECWeb.DbModels.Project
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels
@using Microsoft.EntityFrameworkCore

@inject IDialogService DialogService
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@layout MainLayout

@page "/workflow/{WorkflowId:guid}/bdr-software"

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudStack Spacing="4">

        <!-- Header -->
        <MudPaper Class="pa-4" Elevation="2">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h5">BDR Software-Konfiguration</MudText>
                    @if (currentWorkflow != null)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @currentWorkflow.Name
                        </MudText>
                    }
                </MudStack>
                <!-- Status indicator -->
                <MudChip T="string"
                         Color="@(selectedSoftwareList.Any() ? Color.Success : Color.Default)"
                         Size="Size.Small"
                         Icon="@(selectedSoftwareList.Any() ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.RadioButtonUnchecked)">
                    @(selectedSoftwareList.Any() ? "Konfiguriert" : "Nicht konfiguriert")
                </MudChip>
            </MudStack>
        </MudPaper>

        <MudGrid>

            <!-- BDR Software Selection -->
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="1"
                          Style="@(selectedSoftwareList.Any() ? "background-color: #f8f9fa; border-left: 4px solid #4caf50;" : "")">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        Software-Auswahl
                        @if (selectedSoftwareList.Any())
                        {
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" Class="ml-2" />
                        }
                    </MudText>

                    <!-- Software Selection Controls -->
                    <MudStack Spacing="3">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudSelect T="string"
                                           @bind-Value="newSoftwareType"
                                           Label="Software auswählen"
                                           Variant="Variant.Outlined"
                                           Placeholder="Software auswählen">
                                    <MudSelectItem T="string" Value="@("")">Software auswählen</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("WinCCflex Runtime2008")">WinCCflex Runtime2008</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("WinCC RT Adv.")">WinCC RT Adv.</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Simatic ProDiag for WinCC RT Adv.")">Simatic ProDiag for WinCC RT Adv.</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Simatic WinCC Recipes for RT Adv.")">Simatic WinCC Recipes for RT Adv.</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Siemens Starter/Startdrive")">Siemens Starter/Startdrive</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Cognex Insight")">Cognex Insight</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Stäubli SRS + FTP (Filezilla)")">Stäubli SRS + FTP (Filezilla)</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("DSM LineManager")">DSM LineManager</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Step7 V5.x")">Step7 V5.x</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("TIA Professional")">TIA Professional</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Version for TIA")">Version for TIA</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("WinCCflex Advanced")">WinCCflex Advanced</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Tight VNC Server (Panel)")">Tight VNC Server (Panel)</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("MAGS plc-Linker (pc installation)")">MAGS plc-Linker (pc installation)</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Verpaarung")">Verpaarung</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("VNC viewer (Fernwartungsrechner)")">VNC viewer (Fernwartungsrechner)</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("MSG")">MSG</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("KUE")">KUE</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("GPG")">GPG</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("GPR")">GPR</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("USV Master Phönix")">USV Master Phönix</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("USV Slave")">USV Slave</MudSelectItem>
                                    <MudSelectItem T="string" Value="@("Sonstige")">Sonstige Software</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="newSoftwareVersion"
                                              Label="Version / Details"
                                              Variant="Variant.Outlined"
                                              Placeholder="z.B. Version 2024, Professional, etc."
                                              Disabled="@(string.IsNullOrWhiteSpace(newSoftwareType))" />
                            </MudItem>
                        </MudGrid>

                        @if (newSoftwareType == "Sonstige")
                        {
                            <MudTextField @bind-Value="customSoftware"
                                          Label="Sonstige Software"
                                          Variant="Variant.Outlined"
                                          Placeholder="Geben Sie die gewünschte Software ein..."
                                          Required="true"
                                          RequiredError="Bitte geben Sie die Software ein" />
                        }

                        <MudGrid>
                            <MudItem xs="12" sm="10">
                                <MudCheckBox @bind-Value="newSoftwareLicenseRequired"
                                             Label="Lizenz erforderlich"
                                             Color="Color.Primary"
                                             Disabled="@(string.IsNullOrWhiteSpace(newSoftwareType))" />
                            </MudItem>
                            <MudItem xs="12" sm="2">
                                <MudButton Color="Color.Success"
                                           Variant="Variant.Filled"
                                           Size="Size.Medium"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="AddSelectedSoftware"
                                           Disabled="@(string.IsNullOrWhiteSpace(newSoftwareType))"
                                           FullWidth="true">
                                    Hinzufügen
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudStack>

                    <!-- Selected Software List -->
                    <MudText Typo="Typo.subtitle2" Class="mt-4 mb-2">Ausgewählte Software</MudText>

                    @if (selectedSoftwareList.Any())
                    {
                        <MudStack Spacing="2">
                            @foreach (var software in selectedSoftwareList.Select((item, index) => new { item, index }))
                            {
                                <MudPaper Class="pa-3 mud-success-lighten-5" Elevation="1">
                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="flex-grow-1">
                                            <MudAvatar Color="Color.Success" Size="Size.Small">
                                                @(software.index + 1)
                                            </MudAvatar>
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body1" Class="font-weight-bold" Color="Color.Success">
                                                    @software.item.SoftwareType
                                                </MudText>
                                                @if (!string.IsNullOrEmpty(software.item.Version))
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Primary">
                                                        Version: @software.item.Version
                                                    </MudText>
                                                }
                                                @if (software.item.LicenseRequired)
                                                {
                                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Key">
                                                        Lizenz erforderlich
                                                    </MudChip>
                                                }
                                            </MudStack>
                                        </MudStack>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       OnClick="() => RemoveSelectedSoftware(software.item)"
                                                       Title="Software entfernen" />
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudPaper Class="pa-4 mud-surface-lighten-2" Style="border: 2px dashed var(--mud-palette-lines-default);">
                            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Apps" Color="Color.Secondary" Size="Size.Large" />
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">
                                    Noch keine Software hinzugefügt
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    }
                </MudPaper>
            </MudItem>

            <!-- General Remarks Section -->
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h6" Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Comment" Class="mr-2" />
                            Allgemeine Bemerkungen
                        </MudText>
                        <MudTextField @bind-Value="generalRemarks"
                                      Label="Zusätzliche Bemerkungen zur gesamten Software-Konfiguration"
                                      Variant="Variant.Outlined"
                                      Lines="4"
                                      Placeholder="Allgemeine Hinweise, Besonderheiten oder wichtige Informationen zur Software..." />
                    </MudStack>
                </MudPaper>
            </MudItem>

            <!-- Save Button -->
            <MudItem xs="12">
                <MudStack Row Justify="Justify.Center" Spacing="3" Class="mt-8">
                    <MudButton Color="Color.Success"
                               Variant="Variant.Filled"
                               Size="Size.Large"
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveChanges"
                               Loading="@isSaving"
                               Disabled="@(isSaving || !selectedSoftwareList.Any())">
                        @(hasBdrSoftwareConfig ? "Änderungen speichern" : "BDR Software-Konfiguration speichern")
                    </MudButton>
                </MudStack>
                <MudButton Variant="Variant.Text" Class="mt-4"
                           Size="Size.Small"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           FullWidth="true"
                           OnClick="GoBack">
                    Zurück zur Formular Übersicht
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudContainer>

@code {
    [Parameter] public Guid WorkflowId { get; set; }

    // Software selection fields
    private string newSoftwareType = string.Empty;
    private string customSoftware = string.Empty;
    private string newSoftwareVersion = string.Empty;
    private bool newSoftwareLicenseRequired = false;
    private string generalRemarks = string.Empty;

    private bool isSaving = false;
    private bool hasBdrSoftwareConfig = false;

    // Helper class for software items
    public class SoftwareItem
    {
        public string SoftwareType { get; set; } = string.Empty;
        public string Version { get; set; } = string.Empty;
        public bool LicenseRequired { get; set; } = false;
    }

    // List of selected software
    private List<SoftwareItem> selectedSoftwareList = new();

    private DbWorkflow? currentWorkflow;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflowData();
    }

    // Add selected software to list
    private void AddSelectedSoftware()
    {
        if (string.IsNullOrWhiteSpace(newSoftwareType))
        {
            Snackbar.Add("Bitte Software auswählen!", Severity.Warning);
            return;
        }

        string softwareToAdd = "";

        if (newSoftwareType == "Sonstige")
        {
            if (string.IsNullOrWhiteSpace(customSoftware))
            {
                Snackbar.Add("Bitte geben Sie eine sonstige Software ein!", Severity.Warning);
                return;
            }
            softwareToAdd = customSoftware.Trim();
        }
        else
        {
            softwareToAdd = newSoftwareType.Trim();
        }

        // Check if software already exists in list
        if (selectedSoftwareList.Any(s => s.SoftwareType.Equals(softwareToAdd, StringComparison.OrdinalIgnoreCase)))
        {
            Snackbar.Add("Diese Software wurde bereits hinzugefügt!", Severity.Warning);
            return;
        }

        // Add to selected list
        selectedSoftwareList.Add(new SoftwareItem
        {
            SoftwareType = softwareToAdd,
            Version = newSoftwareVersion?.Trim() ?? string.Empty,
            LicenseRequired = newSoftwareLicenseRequired
        });

        // Clear input fields
        newSoftwareType = string.Empty;
        customSoftware = string.Empty;
        newSoftwareVersion = string.Empty;
        newSoftwareLicenseRequired = false;

        Snackbar.Add("Software hinzugefügt!", Severity.Success);
    }

    // Remove software from selected list
    private void RemoveSelectedSoftware(SoftwareItem software)
    {
        selectedSoftwareList.Remove(software);
        Snackbar.Add("Software entfernt!", Severity.Info);
    }

    private async Task LoadWorkflowData()
    {
        try
        {
            // Load workflow
            currentWorkflow = await DbContext.Workflow
                .FirstOrDefaultAsync(w => w.Id == WorkflowId);

            if (currentWorkflow == null)
            {
                Snackbar.Add("Workflow nicht gefunden!", Severity.Error);
                return;
            }

            // Check if BDR software config exists in workflow description
            var description = currentWorkflow.Description ?? "";

            if (description.Contains("BDRSOFTWARE:"))
            {
                hasBdrSoftwareConfig = true;

                // Parse existing software data
                var startIndex = description.IndexOf("BDRSOFTWARE:") + 12;
                var endIndex = description.IndexOf("ENDMEC:", startIndex);

                string softwareData = endIndex > startIndex
                    ? description.Substring(startIndex, endIndex - startIndex)
                    : description.Substring(startIndex);

                // Parse software items
                selectedSoftwareList = ParseSoftwareData(softwareData);
            }

            // Load general remarks from description
            if (description.Contains("BDRSOFTWARE_REMARKS:"))
            {
                var startIndex = description.IndexOf("BDRSOFTWARE_REMARKS:") + 20;
                var endIndex = description.IndexOf("ENDMEC:", startIndex);

                generalRemarks = endIndex > startIndex
                    ? description.Substring(startIndex, endIndex - startIndex)
                    : description.Substring(startIndex);
            }

            if (hasBdrSoftwareConfig)
            {
                Snackbar.Add("Existierende BDR Software-Konfiguration geladen!", Severity.Info);
            }

            // Force UI refresh
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden: {ex.Message}", Severity.Error);
            Console.WriteLine($"LoadWorkflowData Error: {ex}");
        }
    }

    // Parse software data from encoded string
    private List<SoftwareItem> ParseSoftwareData(string softwareData)
    {
        var items = new List<SoftwareItem>();
        if (string.IsNullOrEmpty(softwareData)) return items;

        var entries = softwareData.Split(';');
        foreach (var entry in entries)
        {
            if (!string.IsNullOrEmpty(entry))
            {
                var parts = entry.Split('|');

                var softwareType = parts.Length > 0 ? parts[0].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var version = parts.Length > 1 ? parts[1].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var licenseStr = parts.Length > 2 ? parts[2] : "false";
                var licenseRequired = licenseStr.Equals("true", StringComparison.OrdinalIgnoreCase);

                if (!string.IsNullOrWhiteSpace(softwareType))
                {
                    items.Add(new SoftwareItem
                    {
                        SoftwareType = softwareType,
                        Version = version,
                        LicenseRequired = licenseRequired
                    });
                }
            }
        }

        return items;
    }

    // Encode software data for storage
    private string EncodeSoftwareData()
    {
        var encodedItems = new List<string>();

        foreach (var software in selectedSoftwareList)
        {
            var encodedType = software.SoftwareType.Replace("|", "PIPE").Replace(";", "SEMICOLON");
            var encodedVersion = software.Version.Replace("|", "PIPE").Replace(";", "SEMICOLON");
            var licenseStr = software.LicenseRequired.ToString().ToLower();

            encodedItems.Add($"{encodedType}|{encodedVersion}|{licenseStr}");
        }

        return string.Join(";", encodedItems);
    }

    private async Task SaveChanges()
    {
        if (currentWorkflow == null)
        {
            Snackbar.Add("BDR Software Formular nicht gefunden!", Severity.Error);
            return;
        }

        if (!selectedSoftwareList.Any())
        {
            Snackbar.Add("Bitte mindestens eine Software auswählen!", Severity.Warning);
            return;
        }

        isSaving = true;
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            var existingDescription = currentWorkflow.Description ?? "";

            // Remove old BDR software data if present
            if (existingDescription.Contains("BDRSOFTWARE:"))
            {
                var startIndex = existingDescription.IndexOf("BDRSOFTWARE:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            // Remove old BDR software remarks if present
            if (existingDescription.Contains("BDRSOFTWARE_REMARKS:"))
            {
                var startIndex = existingDescription.IndexOf("BDRSOFTWARE_REMARKS:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            // Add new encoded software data
            var encodedSoftware = EncodeSoftwareData();
            currentWorkflow.Description = existingDescription + $"BDRSOFTWARE:{encodedSoftware}ENDMEC:";

            // Add general remarks if not empty
            if (!string.IsNullOrWhiteSpace(generalRemarks))
            {
                currentWorkflow.Description += $"BDRSOFTWARE_REMARKS:{generalRemarks.Trim()}ENDMEC:";
            }

            // ⭐ WICHTIG: Status auf SoftwareCompleted setzen, NICHT auf Completed!
            // Damit kann der Benutzer manuell entscheiden, wann an Einkauf weitergeleitet wird
            currentWorkflow.Status = WorkflowStatus.SoftwareCompleted;
            currentWorkflow.LastChange = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            // Success notification
            var message = $"BDR Software-Konfiguration erfolgreich gespeichert! ({selectedSoftwareList.Count} Software-Pakete)";
            Snackbar.Add(message, Severity.Success);

            // Short delay to show success message, then navigate back
            await Task.Delay(1500);
            Navigation.NavigateTo($"/project/{currentWorkflow.ProjectId}/forms");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveChanges Error: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack()
    {
        if (currentWorkflow?.ProjectId != null)
        {
            Navigation.NavigateTo($"/project/{currentWorkflow.ProjectId}/forms");
        }
        else
        {
            Navigation.NavigateTo("/projects");
        }
    }
}