@page "/purchase/orders"
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@layout MainLayout

<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 50px;">
    <MudStack Spacing="4">
        <!-- Header Section -->
        <MudStack Spacing="3">
            <MudText Typo="Typo.h4" Align="Align.Center">
                Einkauf - Rechner Bestellungen
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Secondary">
                @activeProjects.Count Projekte zur Bestellung bereit
            </MudText>
            @if (forwardedProjects.Any())
            {
                <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Success">
                    @forwardedProjects.Count Projekte an Installation weitergeleitet
                </MudText>
            }

            <!-- Search Field -->
            <MudTextField @bind-Value="searchQuery"
                          Immediate="true"
                          DebounceInterval="300"
                          OnDebounceIntervalElapsed="FilterProjects"
                          Placeholder="Projekt suchen..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-4" />
        </MudStack>

        <!-- Loading -->
        @if (loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }

        <!-- Active Projects -->
        @if (filteredActiveProjects.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mt-4">Aktive Bestellungen</MudText>
            <MudStack Spacing="3">
                @foreach (var project in filteredActiveProjects)
                {
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <!-- Project Info -->
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">@project.ProjectNumber</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@project.Name</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                    @project.Workflows.Count(w => w.Status == WorkflowStatus.Completed) Formulare zur Bestellung
                                </MudText>
                            </MudStack>

                            <!-- Actions -->
                            <MudStack Row Spacing="2">
                                <MudButton Color="Color.Primary"
                                           Variant="Variant.Outlined"
                                           Size="Size.Medium"
                                           OnClick="() => ViewProjectDetails(project.Id)">
                                    Details
                                </MudButton>
                                <MudButton Color="Color.Success"
                                           Variant="Variant.Filled"
                                           Size="Size.Medium"
                                           StartIcon="@Icons.Material.Filled.Send"
                                           OnClick="() => ForwardToInstallation(project.Id)"
                                           Loading="@forwardingProjectIds.Contains(project.Id)"
                                           Disabled="@forwardingProjectIds.Contains(project.Id)">
                                    An Installation
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        }

        <!-- Forwarded Projects -->
        @if (filteredForwardedProjects.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-6">An Installation weitergeleitet</MudText>
            <MudStack Spacing="3">
                @foreach (var project in filteredForwardedProjects)
                {
                    <MudPaper Class="pa-4" Elevation="1" Style="opacity: 0.8;">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <!-- Project Info -->
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.h6">@project.ProjectNumber</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@project.Name</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Success">
                                    An Installation weitergeleitet
                                </MudText>
                            </MudStack>

                            <!-- Action Button -->
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Outlined"
                                       Size="Size.Medium"
                                       OnClick="() => ViewProjectDetails(project.Id, true)">
                                Details
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        }

        <!-- Empty State -->
        @if (!loading && !filteredActiveProjects.Any() && !filteredForwardedProjects.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Class="mt-6">
                <MudImage Src="assets/systemstatus/empty_state_V1.png" Alt="Empty" Width="150" Class="ma-6" />
                <MudText Typo="Typo.h6" Color="Color.Secondary">Keine Bestellungen gefunden</MudText>
            </MudStack>
        }


        <!-- Back Button -->
        <MudButton Variant="Variant.Text"
                   Size="Size.Small"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   FullWidth="true"
                   OnClick="GoBack"
                   Class="mt-4">
            Zurück zur Projektübersicht
        </MudButton>
    </MudStack>
</MudContainer>

@code {
    private List<DbProject> activeProjects = new();
    private List<DbProject> forwardedProjects = new();
    private List<DbProject> filteredActiveProjects = new();
    private List<DbProject> filteredForwardedProjects = new();
    private bool loading = true;
    private string searchQuery = "";
    private HashSet<Guid> forwardingProjectIds = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "readOnly")]
    public bool ReadOnly { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    /// <summary>
    /// Load all projects with purchase-relevant workflows
    /// </summary>
    private async Task LoadProjects()
    {
        loading = true;
        try
        {
            var allProjects = await DbContext.Project
                .Include(p => p.Workflows)
                .Where(p => p.Workflows.Any(w =>
                    w.Status == WorkflowStatus.Completed ||
                    w.Status == WorkflowStatus.ForwardedToInstallation))
                .OrderByDescending(p => p.LastChange)
                .ToListAsync();

            // Active projects (have at least one completed workflow that hasn't been forwarded)
            activeProjects = allProjects
                .Where(p => p.Workflows.Any(w => w.Status == WorkflowStatus.Completed))
                .ToList();

            // Forwarded projects (all workflows have been forwarded to installation)
            forwardedProjects = allProjects
                .Where(p => p.Workflows.All(w => w.Status == WorkflowStatus.ForwardedToInstallation) &&
                           p.Workflows.Any(w => w.Status == WorkflowStatus.ForwardedToInstallation))
                .ToList();

            FilterProjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading projects: {ex.Message}");
            Snackbar.Add($"Fehler beim Laden der Projekte: {ex.Message}", Severity.Error);
            activeProjects = new List<DbProject>();
            forwardedProjects = new List<DbProject>();
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Filter projects based on search query
    /// </summary>
    private void FilterProjects()
    {
        var query = searchQuery.Trim().ToLower();

        if (string.IsNullOrEmpty(query))
        {
            filteredActiveProjects = activeProjects;
            filteredForwardedProjects = forwardedProjects;
        }
        else
        {
            filteredActiveProjects = activeProjects
                .Where(p => p.ProjectNumber.ToLower().Contains(query) ||
                           p.Name.ToLower().Contains(query))
                .ToList();

            filteredForwardedProjects = forwardedProjects
                .Where(p => p.ProjectNumber.ToLower().Contains(query) ||
                           p.Name.ToLower().Contains(query))
                .ToList();
        }
    }

    /// <summary>
    /// Navigate to project details view
    /// </summary>
    private void ViewProjectDetails(Guid projectId, bool isForwarded = false)
    {
        var queryParams = new Dictionary<string, string?>();

        if (isForwarded)
        {
            queryParams.Add("readOnly", "true");
        }

        queryParams.Add("returnPath", "overview");

        var url = QueryHelpers.AddQueryString($"/purchase/project/{projectId}", queryParams);
        Navigation.NavigateTo(url);
    }

    /// <summary>
    /// Forward project to installation department
    /// </summary>
    private async Task ForwardToInstallation(Guid projectId)
    {
        forwardingProjectIds.Add(projectId);
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            // Update all completed workflows in this project to "ForwardedToInstallation"
            var completedWorkflows = await DbContext.Workflow
                .Where(w => w.ProjectId == projectId && w.Status == WorkflowStatus.Completed)
                .ToListAsync();

            if (!completedWorkflows.Any())
            {
                Snackbar.Add("Keine abgeschlossenen Workflows zum Weiterleiten gefunden.", Severity.Warning);
                return;
            }

            foreach (var workflow in completedWorkflows)
            {
                workflow.Status = WorkflowStatus.ForwardedToInstallation;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add($"Projekt mit {completedWorkflows.Count} Workflows erfolgreich an Installation weitergeleitet!", Severity.Success);

            // Reload data to move project to forwarded section
            await LoadProjects();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error forwarding project to installation: {ex.Message}");
            Snackbar.Add($"Fehler beim Weiterleiten: {ex.Message}", Severity.Error);
        }
        finally
        {
            forwardingProjectIds.Remove(projectId);
        }
    }

    /// <summary>
    /// Navigate back to projects overview
    /// </summary>
    private void GoBack()
    {
        if (!string.IsNullOrEmpty(ReturnUrl))
        {
            Navigation.NavigateTo(ReturnUrl);
        }
        else
        {
            Navigation.NavigateTo("/projects");
        }
    }
}