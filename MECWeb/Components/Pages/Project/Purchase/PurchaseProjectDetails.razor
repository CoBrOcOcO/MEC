@page "/purchase/project/{ProjectId:guid}"
@using MECWeb.DbModels.Workflow
@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using System.Timers
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@layout ProjectMainLayout
@implements IDisposable

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    <MudStack Spacing="4">
        <MudText Typo="Typo.h4" Color="Color.Secondary" Align="Align.Center">Einkauf</MudText>

        <!-- Project Header -->
        @if (currentProject != null)
        {
            <MudPaper Class="pa-4" Elevation="2">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h4" Color="Color.Primary">@currentProject.ProjectNumber</MudText>
                        <MudText Typo="Typo.h6" Color="Color.Secondary">@currentProject.Name</MudText>

                        @if (!string.IsNullOrWhiteSpace(currentProject.Description))
                        {
                            <MudText Typo="Typo.body2" Color="Color.Tertiary">@currentProject.Description</MudText>
                        }
                    </MudStack>

                    <!-- Action Buttons -->
                    <MudStack Row Spacing="3">
                        @if (!IsReadOnlyMode)
                        {
                            <MudButton Color="Color.Secondary"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="ReleaseForCorrection"
                                       Loading="@isReleasingForCorrection"
                                       Disabled="@(!allWorkflows.Any() || isReleasingForCorrection)">
                                Zur Korrektur freigeben
                            </MudButton>

                            <MudButton Color="Color.Success"
                                       Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Assignment"
                                       OnClick="ForwardToInstallation"
                                       Loading="@isForwarding"
                                       Disabled="@(!CanForwardToInstallation() || isForwarding)">
                                An Installation weiterleiten
                            </MudButton>
                        }

                    </MudStack>
                </MudStack>
            </MudPaper>

            <!-- ReadOnly Banner -->
            @if (IsReadOnlyMode)
            {
                <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.Lock" Variant="Variant.Filled">
                    <MudText Typo="Typo.body1" Style="font-weight: 500;">
                        <strong>Projekt wurde an Installation weitergeleitet.</strong>
                        Alle Details können eingesehen, aber nicht mehr bearbeitet werden.
                    </MudText>
                </MudAlert>
            }
        }

        <!-- Status Overview -->
        @if (currentProject != null)
        {
            <ProjectStatusOverview ProjectId="@ProjectId"
                                   IsLoading="@loading" />
        }

        <!-- Loading -->
        @if (loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }

        <!-- No workflows message -->
        @if (!loading && !allWorkflows.Any())
        {
            <MudAlert Severity="Severity.Warning">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.body1" Style="font-weight: 600;">
                        Keine Formulare für den Einkauf gefunden
                    </MudText>
                    <MudText Typo="Typo.body2">
                        Dieses Projekt wurde zur Korrektur an Formulare zurückgeleitet.
                    </MudText>
                </MudStack>
            </MudAlert>
        }

        <!-- Individual Workflow Cards -->
        @if (!loading && allWorkflows.Any())
        {
            var bdrWorkflows = allWorkflows.Where(w => w.WorkflowType == WorkflowType.BDR).OrderBy(w => w.Name).ToList();
            var bvWorkflows = allWorkflows.Where(w => w.WorkflowType == WorkflowType.BV).OrderBy(w => w.Name).ToList();

            <!-- BDR Section Header -->
            @if (bdrWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-2">
                    <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Primary">BDR - Bedienungsrechner (@bdrWorkflows.Count)</MudText>
                </MudStack>

                <!-- BDR Workflow Forms -->
                @foreach (var workflow in bdrWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);
                    <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                         WorkflowType="BDR - Bedienungsrechner"
                                         WorkflowIcon="@Icons.Material.Filled.Computer"
                                         StatusText="@(IsReadOnlyMode ? "Bei Installation" : "Beim Einkauf")"
                                         MainHardware="@orderDetails.MainHardware"
                                         HardwareItems="@orderDetails.HardwareDetails"
                                         AdditionalHardwareItems="@orderDetails.AdditionalHardware"
                                         SoftwareItems="@orderDetails.Software"
                                         Notes="@orderDetails.Notes"
                                         HardwareRemarks="@orderDetails.HardwareRemarks"
                                         SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                         ShowComments="false">
                    </WorkflowDetailsCard>


                    <!-- Comment Section für BDR -->
                    <MudPaper Elevation="1" Class="pa-4 mb-4" Style="@(IsReadOnlyMode ? "background-color: #f5f5f5;" : "")">
                        <MudStack Spacing="3">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@(IsReadOnlyMode? Icons.Material.Filled.Comment : Icons.Material.Filled.AssignmentTurnedIn)"
                                         Color="@(IsReadOnlyMode ?  Color.Secondary : Color.Success)" />
                                <MudText Typo="Typo.h6" Color="@(IsReadOnlyMode? Color.Secondary: Color.Success)">
                                    Kommentar für Installation
                                </MudText>
                            </MudStack>

                            @if (!string.IsNullOrWhiteSpace(GetWorkflowComment(workflow.Id)))
                            {
                                <MudPaper Class="pa-3" Elevation="0"
                                          Style="@(IsReadOnlyMode ? "background-color: white; border-left: 4px solid #2196f3;" : "")">
                                    <MudTextField Value="@GetWorkflowComment(workflow.Id)"
                                                  ValueChanged="@((string value) => UpdateWorkflowComment(workflow.Id, value))"
                                                  Label="Kommentare/Hinweise für Installation"
                                                  Placeholder="Spezielle Installations-Hinweise, Besonderheiten, etc..."
                                                  Variant="Variant.Outlined"
                                                  Lines="3"
                                                  ReadOnly="@IsReadOnlyMode"
                                                  Disabled="@IsReadOnlyMode" />
                                </MudPaper>
                            }
                            else if (!IsReadOnlyMode)
                            {
                                <MudTextField Value="@GetWorkflowComment(workflow.Id)"
                                              ValueChanged="@((string value) => UpdateWorkflowComment(workflow.Id, value))"
                                              Label="Kommentare/Hinweise für Installation"
                                              Placeholder="Spezielle Installations-Hinweise, Besonderheiten, etc..."
                                              Variant="Variant.Outlined"
                                              Lines="3" />
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Tertiary" Style="font-style: italic;">
                                    Kein Kommentar vorhanden
                                </MudText>
                            }

                            @if (!IsReadOnlyMode)
                            {
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudCheckBox Value="@GetWorkflowCompletionStatus(workflow.Id)"
                                                 ValueChanged="@((bool value) => UpdateWorkflowCompletionStatus(workflow.Id, value))"
                                                 Color="Color.Success"
                                                 Size="Size.Medium"
                                                 Dense="true">
                                        <MudText Typo="Typo.body1" Style="font-weight: 500;">
                                            Erledigt
                                            @if (GetWorkflowCompletionStatus(workflow.Id))
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Class="ml-2">
                                                    @GetCompletionDateText(workflow.Id)
                                                </MudChip>
                                            }
                                        </MudText>
                                    </MudCheckBox>

                                    <MudButton Color="Color.Success"
                                               Variant="Variant.Filled"
                                               Size="Size.Medium"
                                               StartIcon="@Icons.Material.Filled.Save"
                                               OnClick="() => SaveWorkflowComment(workflow.Id)"
                                               Loading="@IsSavingWorkflow(workflow.Id)"
                                               Disabled="@IsSavingWorkflow(workflow.Id)">
                                        Speichern
                                    </MudButton>
                                </MudStack>
                            }
                            else if (workflow.PurchaseCompleted)
                            {
                                <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle" Dense="true">
                                    Vom Einkauf erledigt am @(workflow.PurchaseCompletedDate?.ToLocalTime().ToString("dd.MM.yyyy HH:mm") ?? "unbekannt")
                                </MudAlert>
                            }
                        </MudStack>
                    </MudPaper>
                }
            }

            <!-- BV Section Header und Forms -->
            @if (bvWorkflows.Any())
            {
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mt-6">
                    <MudIcon Icon="@Icons.Material.Filled.CameraAlt" Color="Color.Secondary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary">BV - Bildverarbeitungsrechner (@bvWorkflows.Count)</MudText>
                </MudStack>

                <!-- BV Workflow Forms -->
                @foreach (var workflow in bvWorkflows)
                {
                    var orderDetails = GetOrderDetailsForWorkflow(workflow);
                    var contactPerson = GetContactPersonForBvWorkflow(workflow);

                    <WorkflowDetailsCard WorkflowName="@workflow.Name"
                                         WorkflowType="BV - Bildverarbeitungsrechner"
                                         WorkflowIcon="@Icons.Material.Filled.CameraAlt"
                                         StatusText="@(IsReadOnlyMode ? "Bei Installation" : "Beim Einkauf")"
                                         MainHardware="@orderDetails.MainHardware"
                                         HardwareItems="@orderDetails.HardwareDetails"
                                         AdditionalHardwareItems="@orderDetails.AdditionalHardware"
                                         SoftwareItems="@orderDetails.Software"
                                         Notes="@orderDetails.Notes"
                                         ContactPerson="@contactPerson"
                                         HardwareRemarks="@orderDetails.HardwareRemarks"
                                         SoftwareRemarks="@orderDetails.SoftwareRemarks"
                                         ShowComments="false">
                    </WorkflowDetailsCard>

                    <!-- Comment Section für BV -->
                    <MudPaper Elevation="1" Class="pa-4 mb-4" Style="@(IsReadOnlyMode ? "background-color: #f5f5f5;" : "")">
                        <MudStack Spacing="3">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@(IsReadOnlyMode? Icons.Material.Filled.Comment : Icons.Material.Filled.AssignmentTurnedIn)"
                                         Color="@(IsReadOnlyMode ? Color.Secondary : Color.Success)" />
                                <MudText Typo="Typo.h6" Color="@(IsReadOnlyMode? Color.Secondary: Color.Success)">
                                    Kommentar für Installation
                                </MudText>
                            </MudStack>

                            @if (!string.IsNullOrWhiteSpace(GetWorkflowComment(workflow.Id)))
                            {
                                <MudPaper Class="pa-3" Elevation="0"
                                          Style="@(IsReadOnlyMode ? "background-color: white; border-left: 4px solid #757575;" : "")">
                                    <MudTextField Value="@GetWorkflowComment(workflow.Id)"
                                                  ValueChanged="@((string value) => UpdateWorkflowComment(workflow.Id, value))"
                                                  Label="Kommentare/Hinweise für Installation"
                                                  Placeholder="Spezielle Installations-Hinweise, Besonderheiten, etc..."
                                                  Variant="Variant.Outlined"
                                                  Lines="3"
                                                  ReadOnly="@IsReadOnlyMode"
                                                  Disabled="@IsReadOnlyMode" />
                                </MudPaper>
                            }
                            else if (!IsReadOnlyMode)
                            {
                                <MudTextField Value="@GetWorkflowComment(workflow.Id)"
                                              ValueChanged="@((string value) => UpdateWorkflowComment(workflow.Id, value))"
                                              Label="Kommentare/Hinweise für Installation"
                                              Placeholder="Spezielle Installations-Hinweise, Besonderheiten, etc..."
                                              Variant="Variant.Outlined"
                                              Lines="3" />
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Color="Color.Tertiary" Style="font-style: italic;">
                                    Kein Kommentar vorhanden
                                </MudText>
                            }

                            @if (!IsReadOnlyMode)
                            {
                                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudCheckBox Value="@GetWorkflowCompletionStatus(workflow.Id)"
                                                 ValueChanged="@((bool value) => UpdateWorkflowCompletionStatus(workflow.Id, value))"
                                                 Color="Color.Success"
                                                 Size="Size.Medium"
                                                 Dense="true">
                                        <MudText Typo="Typo.body1" Style="font-weight: 500;">
                                            Erledigt
                                            @if (GetWorkflowCompletionStatus(workflow.Id))
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Class="ml-2">
                                                    @GetCompletionDateText(workflow.Id)
                                                </MudChip>
                                            }
                                        </MudText>
                                    </MudCheckBox>

                                    <MudButton Color="Color.Success"
                                               Variant="Variant.Filled"
                                               Size="Size.Medium"
                                               StartIcon="@Icons.Material.Filled.Save"
                                               OnClick="() => SaveWorkflowComment(workflow.Id)"
                                               Loading="@IsSavingWorkflow(workflow.Id)"
                                               Disabled="@IsSavingWorkflow(workflow.Id)">
                                        Speichern
                                    </MudButton>
                                </MudStack>
                            }
                            else if (workflow.PurchaseCompleted)
                            {
                                <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle" Dense="true">
                                    Vom Einkauf erledigt am @(workflow.PurchaseCompletedDate?.ToLocalTime().ToString("dd.MM.yyyy HH:mm") ?? "unbekannt")
                                </MudAlert>
                            }
                        </MudStack>
                    </MudPaper>
                }
            }

            <!-- Summary -->
            <MudPaper Class="pa-4 mt-4 mb-4" Elevation="1" Style="background-color: var(--mud-palette-background-grey);">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Primary">@bdrWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BDR Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Secondary">@bvWorkflows.Count</MudText>
                            <MudText Typo="Typo.caption">BV Rechner</MudText>
                        </MudStack>
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudText Typo="Typo.h6" Color="Color.Success">@(bdrWorkflows.Count + bvWorkflows.Count)</MudText>
                            <MudText Typo="Typo.caption">Gesamt</MudText>
                        </MudStack>
                        @if (!IsReadOnlyMode)
                        {
                            <MudDivider Vertical="true" FlexItem="true" />
                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                <MudText Typo="Typo.h6" Color="Color.Success">@GetCompletedWorkflowsCount()</MudText>
                                <MudText Typo="Typo.caption">Erledigt</MudText>
                            </MudStack>
                        }
                    </MudStack>
                    <MudText Typo="Typo.body1" Color="@(IsReadOnlyMode? Color.Secondary: Color.Success)" Class="font-weight-bold">
                        @(IsReadOnlyMode ? "An Installation weitergeleitet" : "Bereit für Installation")
                    </MudText>
                </MudStack>
            </MudPaper>
        }

        <!-- Back Button -->
        <MudButton Variant="Variant.Text"
                   Size="Size.Small"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   FullWidth="true"
                   OnClick="NavigateBack"
                   Class="px-3 py-1">
            Zurück zur Projektübersicht
        </MudButton>

    </MudStack>
</MudContainer>

@code {
    [Parameter] public Guid ProjectId { get; set; }

    // Clean order data structure for display
    public class OrderDetails
    {
        public string MainHardware { get; set; } = string.Empty;
        public List<string> HardwareDetails { get; set; } = new();
        public List<string> AdditionalHardware { get; set; } = new();
        public List<string> PcDetails { get; set; } = new();
        public List<string> Software { get; set; } = new();
        public string Notes { get; set; } = string.Empty;
        public string HardwareRemarks { get; set; } = string.Empty;
        public string SoftwareRemarks { get; set; } = string.Empty;
    }

    // Component state
    private DbProject? currentProject;
    private List<DbWorkflow> allWorkflows = new();
    private bool loading = true;
    private bool isForwarding = false;
    private bool isReleasingForCorrection = false;

    // Automatically determine if we're in read-only mode based on workflow status
    private bool IsReadOnlyMode => allWorkflows.Any() &&
                                    allWorkflows.All(w => w.Status == WorkflowStatus.ForwardedToInstallation);

    // Comment and completion tracking
    private Dictionary<Guid, string> workflowComments = new();
    private Dictionary<Guid, bool> workflowCompletionStatus = new();
    private Dictionary<Guid, DateTime?> workflowCompletionDates = new();
    private HashSet<Guid> savingWorkflows = new();

    // Data caches for performance
    private Dictionary<Guid, DbHardwareComputer?> bdrHardwareCache = new();
    private Dictionary<Guid, List<DbHardwareField>> bdrFieldsCache = new();
    private Dictionary<Guid, DbBvHardwareComputer?> bvHardwareCache = new();
    private Dictionary<Guid, List<DbBvHardwareComponent>> bvComponentsCache = new();

    // Auto-refresh timer
    private System.Timers.Timer? autoRefreshTimer;
    private int lastWorkflowCount = 0;
    private bool isCheckingForUpdates = false;

    // Cancellation token for async operations
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        await LoadProjectDetails();
        StartAutoRefresh();
    }

    public void Dispose()
    {
        StopAutoRefresh();
        cts?.Cancel();
        cts?.Dispose();
    }

    /// <summary>
    /// Start auto-refresh timer to check for new workflows
    /// </summary>
    private void StartAutoRefresh()
    {
        // Only start timer if not in read-only mode
        if (!IsReadOnlyMode)
        {
            autoRefreshTimer = new System.Timers.Timer(1000); 
            autoRefreshTimer.Elapsed += async (sender, e) => await CheckForNewWorkflows();
            autoRefreshTimer.AutoReset = true;
            autoRefreshTimer.Start();
        }
    }

    /// <summary>
    /// Stop auto-refresh timer
    /// </summary>
    private void StopAutoRefresh()
    {
        if (autoRefreshTimer != null)
        {
            autoRefreshTimer.Stop();
            autoRefreshTimer.Dispose();
            autoRefreshTimer = null;
        }
    }

    /// <summary>
    /// Check for new workflows from Forms page
    /// </summary>
    private async Task CheckForNewWorkflows()
    {
        if (isCheckingForUpdates || IsReadOnlyMode) return;

        isCheckingForUpdates = true;
        try
        {
            var currentCount = await DbContext.Workflow
                .AsNoTracking()
                .Where(w => w.ProjectId == ProjectId &&
                           (w.Status == WorkflowStatus.Completed ||
                            w.Status == WorkflowStatus.ForwardedToInstallation))
                .CountAsync();

            // If workflow count changed, reload everything
            if (currentCount != lastWorkflowCount && lastWorkflowCount > 0)
            {
                await InvokeAsync(async () =>
                {
                    await LoadProjectDetails();
                    StateHasChanged();

                    // Show notification
                    Snackbar.Add($"Neue Workflows vom Formular-Bereich erkannt! ({currentCount} Workflows)", Severity.Info);
                });
            }

            lastWorkflowCount = currentCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CheckForNewWorkflows Error: {ex.Message}");
        }
        finally
        {
            isCheckingForUpdates = false;
        }
    }

    /// <summary>
    /// Load project and workflow details
    /// </summary>
    private async Task LoadProjectDetails()
    {
        loading = true;
        try
        {
            currentProject = await DbContext.Project
                .Include(p => p.Workflows)
                .FirstOrDefaultAsync(p => p.Id == ProjectId);

            if (currentProject == null)
            {
                Snackbar.Add("Projekt nicht gefunden!", Severity.Error);
                return;
            }

            // Load BOTH Completed AND ForwardedToInstallation workflows
            allWorkflows = currentProject.Workflows
                .Where(w => w.Status == WorkflowStatus.Completed ||
                            w.Status == WorkflowStatus.ForwardedToInstallation)
                .OrderBy(w => w.WorkflowType)
                .ThenBy(w => w.Name)
                .ToList();

            // Update workflow count for auto-refresh
            lastWorkflowCount = allWorkflows.Count;

            if (!allWorkflows.Any())
            {
                // No workflows found - show helpful message in UI
                return;
            }

            await LoadDetailedData();

            // Stop auto-refresh if we enter read-only mode
            if (IsReadOnlyMode)
            {
                StopAutoRefresh();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden des Projekts: {ex.Message}", Severity.Error);
            Console.WriteLine($"LoadProjectDetails Error: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Check if all workflows are completed and ready for installation
    /// </summary>
    private bool CanForwardToInstallation()
    {
        if (!allWorkflows.Any() || IsReadOnlyMode) return false;

        foreach (var workflow in allWorkflows)
        {
            if (!workflowCompletionStatus.TryGetValue(workflow.Id, out var isCompleted) || !isCompleted)
            {
                return false;
            }
        }

        return true;
    }

    /// <summary>
    /// Release project for correction
    /// </summary>
    private async Task ReleaseForCorrection()
    {
        if (IsReadOnlyMode || !allWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zur Freigabe vorhanden!", Severity.Warning);
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            title: "Zur Korrektur freigeben",
            markupMessage: new MarkupString($@"
                <div style='line-height: 1.6;'>
                    <div style='margin-bottom: 16px;'>
                        Möchten Sie das Projekt zur Korrektur freigeben?
                    </div>

                    <div style='margin-bottom: 8px; font-weight: 600; color: #1976d2;'>
                        Projekt:
                    </div>
                    <div style='margin-bottom: 16px; font-weight: 500;'>
                        {currentProject?.ProjectNumber} - {currentProject?.Name}
                    </div>

                    <div style='color: #ff9800; font-weight: 500; display: flex; align-items: center; gap: 8px;'>
                        <span style='font-size: 18px;'>📝</span>
                        <span>Die Abteilungen können das Projekt wieder bearbeiten.</span>
                    </div>
                </div>
            "),
            yesText: "Freigeben",
            noText: "Abbrechen"
        );

        if (result != true) return;

        isReleasingForCorrection = true;
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            foreach (var workflow in allWorkflows)
            {
                workflow.Status = WorkflowStatus.SoftwareCompleted;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt erfolgreich zur Korrektur freigegeben!", Severity.Success);

            await Task.Delay(1500);
            Navigation.NavigateTo($"/project/{ProjectId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Freigeben: {ex.Message}", Severity.Error);
            Console.WriteLine($"ReleaseForCorrection Error: {ex}");
        }
        finally
        {
            isReleasingForCorrection = false;
        }
    }

    /// <summary>
    /// Load detailed hardware and software data
    /// </summary>
    private async Task LoadDetailedData()
    {
        try
        {
            var bdrWorkflowIds = allWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BDR)
                .Select(w => w.Id)
                .ToList();

            if (bdrWorkflowIds.Any())
            {
                var bdrHardwareWithFields = await DbContext.HardwareComputer
                    .Include(h => h.HardwareFields.Where(f => f.IsActive))
                    .Where(h => bdrWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bdrHardwareWithFields)
                {
                    bdrHardwareCache[hardware.WorkflowId] = hardware;

                    var fields = hardware.HardwareFields
                        .OrderBy(f => f.DisplayOrder)
                        .ThenBy(f => f.DisplayName)
                        .ToList();

                    bdrFieldsCache[hardware.WorkflowId] = fields;
                }
            }

            var bvWorkflowIds = allWorkflows
                .Where(w => w.WorkflowType == WorkflowType.BV)
                .Select(w => w.Id)
                .ToList();

            if (bvWorkflowIds.Any())
            {
                var bvHardwareList = await DbContext.BvHardwareComputer
                    .Where(h => bvWorkflowIds.Contains(h.WorkflowId))
                    .ToListAsync();

                foreach (var hardware in bvHardwareList)
                {
                    bvHardwareCache[hardware.WorkflowId] = hardware;

                    var components = await DbContext.BvHardwareComponent
                        .Where(c => c.BvHardwareComputerId == hardware.Id && c.IsActive && c.IsSelected)
                        .ToListAsync();

                    bvComponentsCache[hardware.WorkflowId] = components;
                }
            }

            LoadWorkflowComments();
            LoadWorkflowCompletionStatus();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der Hardware-Details: {ex.Message}", Severity.Warning);
            Console.WriteLine($"LoadDetailedData Error: {ex}");
        }
    }

    /// <summary>
    /// Get formatted order details for display
    /// </summary>
    private OrderDetails GetOrderDetailsForWorkflow(DbWorkflow workflow)
    {
        var orderData = new OrderDetails();

        try
        {
            if (workflow.WorkflowType == WorkflowType.BDR)
            {
                ProcessBdrHardware(workflow, orderData);
            }
            else
            {
                ProcessBvHardware(workflow, orderData);
            }

            ProcessWorkflowSoftware(workflow, orderData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GetOrderDetailsForWorkflow Error: {ex.Message}");
            orderData.Notes = $"Fehler beim Laden der Details: {ex.Message}";
        }

        return orderData;
    }

    /// <summary>
    /// Get contact person for BV workflow
    /// </summary>
    private string GetContactPersonForBvWorkflow(DbWorkflow workflow)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            return bvHardware.ContactPerson ?? "";
        }
        return "";
    }

    /// <summary>
    /// Process BDR hardware data for display
    /// </summary>
    private void ProcessBdrHardware(DbWorkflow workflow, OrderDetails orderData)
    {
        if (bdrHardwareCache.TryGetValue(workflow.Id, out var bdrHardware) && bdrHardware != null)
        {
            if (!string.IsNullOrEmpty(bdrHardware.HardwareSpecs))
            {
                orderData.MainHardware = bdrHardware.HardwareSpecs;
            }

            if (!string.IsNullOrEmpty(bdrHardware.Description))
            {
                orderData.HardwareRemarks = bdrHardware.Description;
            }

            if (bdrFieldsCache.TryGetValue(workflow.Id, out var fields))
            {
                var hardwareFields = fields.Where(f => f.FieldType == "Hardware" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in hardwareFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? string.Empty;
                    if (!string.IsNullOrEmpty(value))
                    {
                        orderData.HardwareDetails.Add($"{displayName}: {value}");
                    }
                }

                var additionalFields = fields.Where(f => f.FieldType == "Additional" && !string.IsNullOrWhiteSpace(f.FieldValue)).ToList();
                foreach (var field in additionalFields)
                {
                    var displayName = !string.IsNullOrEmpty(field.DisplayName) ? field.DisplayName : field.FieldName;
                    var value = field.FieldValue?.Trim() ?? string.Empty;
                    if (!string.IsNullOrEmpty(value))
                    {
                        orderData.AdditionalHardware.Add($"{displayName}: {value}");
                    }
                }
            }
        }
    }

    /// <summary>
    /// Process BV hardware data for display
    /// </summary>
    private void ProcessBvHardware(DbWorkflow workflow, OrderDetails orderData)
    {
        if (bvHardwareCache.TryGetValue(workflow.Id, out var bvHardware) && bvHardware != null)
        {
            if (!string.IsNullOrEmpty(bvHardware.PcType))
            {
                orderData.MainHardware = bvHardware.PcType;
            }

            if (!string.IsNullOrEmpty(bvHardware.PcTypeDetails))
            {
                var parts = bvHardware.PcTypeDetails.Split('|');

                if (parts.Length > 1 && !string.IsNullOrWhiteSpace(parts[1]))
                {
                    var requirements = parts[1].Split(';', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var req in requirements)
                    {
                        orderData.HardwareDetails.Add(req.Trim());
                    }
                }

                if (parts.Length > 2 && !string.IsNullOrWhiteSpace(parts[2]))
                {
                    orderData.HardwareRemarks = parts[2].Trim();
                }
            }

            if (bvComponentsCache.TryGetValue(workflow.Id, out var components) && components.Any())
            {
                foreach (var component in components)
                {
                    var componentText = component.ComponentName ?? "Unbekannte Komponente";
                    var details = new List<string>();

                    if (!string.IsNullOrEmpty(component.Quantity) && component.Quantity != "1")
                    {
                        details.Add($"{component.Quantity}x");
                    }

                    if (!string.IsNullOrEmpty(component.ComponentType))
                    {
                        details.Add(component.ComponentType);
                    }

                    if (details.Any())
                    {
                        orderData.HardwareDetails.Add($"{componentText} ({string.Join(", ", details)})");
                    }
                    else
                    {
                        orderData.HardwareDetails.Add(componentText);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Process software data from workflow description
    /// </summary>
    private void ProcessWorkflowSoftware(DbWorkflow workflow, OrderDetails orderData)
    {
        var description = workflow.Description ?? "";
        string softwarePrefix = workflow.WorkflowType == WorkflowType.BDR ? "BDRSOFTWARE:" : "BVSOFTWARE:";
        string remarksPrefix = workflow.WorkflowType == WorkflowType.BDR ? "BDRSOFTWARE_REMARKS:" : "BVSOFTWARE_REMARKS:";

        if (description.Contains(softwarePrefix))
        {
            var startIndex = description.IndexOf(softwarePrefix) + softwarePrefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            string softwareData = endIndex > startIndex
                ? description.Substring(startIndex, endIndex - startIndex)
                : description.Substring(startIndex);

            var softwareItems = ParseSoftwareData(softwareData, workflow.WorkflowType == WorkflowType.BDR);

            var uniqueSoftware = softwareItems.Distinct().ToList();
            orderData.Software.AddRange(uniqueSoftware);
        }

        if (description.Contains(remarksPrefix))
        {
            var startIndex = description.IndexOf(remarksPrefix) + remarksPrefix.Length;
            var endIndex = description.IndexOf("ENDMEC:", startIndex);

            orderData.SoftwareRemarks = endIndex > startIndex
                ? description.Substring(startIndex, endIndex - startIndex)
                : description.Substring(startIndex);
        }
    }

    /// <summary>
    /// Parse software data from encoded string
    /// </summary>
    private List<string> ParseSoftwareData(string softwareData, bool isBdr)
    {
        var items = new List<string>();
        if (string.IsNullOrEmpty(softwareData)) return items;

        var entries = softwareData.Split(';');
        foreach (var entry in entries)
        {
            if (!string.IsNullOrEmpty(entry))
            {
                var parts = entry.Split('|');
                var softwareType = parts.Length > 0 ? parts[0].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var note = parts.Length > 1 ? parts[1].Replace("PIPE", "|").Replace("SEMICOLON", ";") : "";
                var licenseStr = parts.Length > 2 ? parts[2] : "false";
                var licenseRequired = isBdr && licenseStr.Equals("true", StringComparison.OrdinalIgnoreCase);

                if (!string.IsNullOrWhiteSpace(softwareType))
                {
                    var softwareEntry = softwareType;

                    if (!string.IsNullOrEmpty(note))
                    {
                        softwareEntry += $" (Version: {note})";
                    }

                    if (isBdr && licenseRequired)
                    {
                        softwareEntry += " [Lizenz erforderlich]";
                    }

                    items.Add(softwareEntry);
                }
            }
        }

        return items;
    }

    /// <summary>
    /// Forward project to installation
    /// </summary>
    private async Task ForwardToInstallation()
    {
        if (IsReadOnlyMode || !allWorkflows.Any())
        {
            Snackbar.Add("Keine Formulare zum Weiterleiten vorhanden!", Severity.Warning);
            return;
        }

        if (!CanForwardToInstallation())
        {
            var completedCount = GetCompletedWorkflowsCount();
            var totalCount = allWorkflows.Count;
            Snackbar.Add($"Bitte alle Workflows als erledigt markieren! ({completedCount}/{totalCount} erledigt)", Severity.Warning);
            return;
        }

        isForwarding = true;

        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            foreach (var workflow in allWorkflows)
            {
                workflow.Status = WorkflowStatus.ForwardedToInstallation;
                workflow.LastChange = DateTime.UtcNow;
            }

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            Snackbar.Add("Projekt erfolgreich an Installation weitergeleitet!", Severity.Success);

            // Reload to show read-only view
            await Task.Delay(1000);
            await LoadProjectDetails();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Weiterleiten: {ex.Message}", Severity.Error);
            Console.WriteLine($"ForwardToInstallation Error: {ex}");
        }
        finally
        {
            isForwarding = false;
        }
    }

    /// <summary>
    /// Navigate back to project overview page
    /// </summary>
    private void NavigateBack()
    {
        Navigation.NavigateTo($"/project/{ProjectId}", forceLoad: true);
    }

    /// <summary>
    /// Get workflow comment from memory
    /// </summary>
    private string GetWorkflowComment(Guid workflowId)
    {
        return workflowComments.TryGetValue(workflowId, out var comment) ? comment : "";
    }

    /// <summary>
    /// Load existing comments from workflow
    /// </summary>
    private void LoadWorkflowComments()
    {
        try
        {
            foreach (var workflow in allWorkflows)
            {
                workflowComments[workflow.Id] = workflow.PurchaseComment ?? "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadWorkflowComments Error: {ex.Message}");
        }
    }

    /// <summary>
    /// Load workflow completion status
    /// </summary>
    private void LoadWorkflowCompletionStatus()
    {
        try
        {
            foreach (var workflow in allWorkflows)
            {
                workflowCompletionStatus[workflow.Id] = workflow.PurchaseCompleted;
                workflowCompletionDates[workflow.Id] = workflow.PurchaseCompletedDate;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadWorkflowCompletionStatus Error: {ex.Message}");
        }
    }

    /// <summary>
    /// Update workflow comment in memory
    /// </summary>
    private void UpdateWorkflowComment(Guid workflowId, string comment)
    {
        if (!IsReadOnlyMode)
        {
            workflowComments[workflowId] = comment ?? "";
        }
    }

    /// <summary>
    /// Get workflow completion status safely
    /// </summary>
    private bool GetWorkflowCompletionStatus(Guid workflowId)
    {
        return workflowCompletionStatus.TryGetValue(workflowId, out var status) && status;
    }

    /// <summary>
    /// Update workflow completion status
    /// </summary>
    private void UpdateWorkflowCompletionStatus(Guid workflowId, bool value)
    {
        if (!IsReadOnlyMode)
        {
            workflowCompletionStatus[workflowId] = value;
        }
    }

    /// <summary>
    /// Check if a specific workflow is currently being saved
    /// </summary>
    private bool IsSavingWorkflow(Guid workflowId)
    {
        return savingWorkflows.Contains(workflowId);
    }

    /// <summary>
    /// Get completion date text for display
    /// </summary>
    private string GetCompletionDateText(Guid workflowId)
    {
        if (workflowCompletionDates.TryGetValue(workflowId, out var date) && date.HasValue)
        {
            return date.Value.ToLocalTime().ToString("dd.MM.yyyy");
        }
        return "Heute";
    }

    /// <summary>
    /// Get count of completed workflows
    /// </summary>
    private int GetCompletedWorkflowsCount()
    {
        return workflowCompletionStatus.Count(kvp => kvp.Value);
    }

    /// <summary>
    /// Save individual workflow comment and completion status
    /// </summary>
    private async Task SaveWorkflowComment(Guid workflowId)
    {
        if (IsReadOnlyMode) return;

        var workflow = allWorkflows.FirstOrDefault(w => w.Id == workflowId);
        if (workflow == null)
        {
            Snackbar.Add("Workflow nicht gefunden!", Severity.Error);
            return;
        }

        savingWorkflows.Add(workflowId);
        try
        {
            using var transaction = await DbContext.Database.BeginTransactionAsync();

            workflow.PurchaseComment = workflowComments.TryGetValue(workflowId, out var comment)
                ? comment?.Trim()
                : null;

            var existingDescription = workflow.Description ?? "";

            if (existingDescription.Contains("PURCHASE_COMMENT:"))
            {
                var startIndex = existingDescription.IndexOf("PURCHASE_COMMENT:");
                var endIndex = existingDescription.IndexOf("ENDMEC:", startIndex);
                if (endIndex > startIndex)
                {
                    existingDescription = existingDescription.Remove(startIndex, endIndex - startIndex + 7);
                }
                else
                {
                    existingDescription = existingDescription.Substring(0, startIndex);
                }
            }

            if (!string.IsNullOrWhiteSpace(workflow.PurchaseComment))
            {
                workflow.Description = existingDescription + $"PURCHASE_COMMENT:{workflow.PurchaseComment}ENDMEC:";
            }
            else
            {
                workflow.Description = existingDescription;
            }

            var isCompleted = workflowCompletionStatus.TryGetValue(workflowId, out var completed) && completed;
            workflow.PurchaseCompleted = isCompleted;
            workflow.PurchaseCompletedDate = isCompleted ? DateTime.UtcNow : null;

            workflowCompletionDates[workflowId] = workflow.PurchaseCompletedDate;

            workflow.LastChange = DateTime.UtcNow;

            await DbContext.SaveChangesAsync();
            await transaction.CommitAsync();

            var statusText = isCompleted ? " und als erledigt markiert" : "";
            Snackbar.Add($"Kommentar für '{workflow.Name}' gespeichert{statusText}!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Speichern: {ex.Message}", Severity.Error);
            Console.WriteLine($"SaveWorkflowComment Error: {ex.Message}");
        }
        finally
        {
            savingWorkflows.Remove(workflowId);
            StateHasChanged();
        }
    }
}