@using MECWeb.Models.Gitea
@using MECWeb.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.IO
@inject GiteaService GiteaService
@inject ISnackbar Snackbar

<MudDialog Style="min-width: 600px;">
    <DialogContent>
        <MudStack Spacing="3">

            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Upload" Color="Color.Primary" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.h5">Datei einchecken</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Datei in das Repository hochladen und versionieren
                    </MudText>
                </MudStack>
            </MudStack>

            <MudDivider />

            <MudAlert Severity="Severity.Info" Dense="true">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.body2">
                        <strong>Repository:</strong> @RepositoryOwner/@RepositoryName
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Ziel-Pfad:</strong> @GetTargetPathDisplay()
                    </MudText>
                </MudStack>
            </MudAlert>

            <MudStack Spacing="2">
                <MudText Typo="Typo.subtitle1">
                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" Size="Size.Small" Style="margin-right: 4px;" />
                    Datei auswählen
                </MudText>

                <MudPaper Style="border: 2px dashed var(--mud-palette-primary); border-radius: 8px; padding: 20px; text-align: center;">
                    <InputFile OnChange="OnFileSelected"
                               accept=".ap17,.s7p,.zap,.tsproj,.pro,.acd,.pdf,.doc,.docx,.txt,.jpg,.png,.zip,.cs,.py,.html,.json,.xml,.csv,.xlsx"
                               style="display: none;"
                               id="fileInput" />

                    <label for="fileInput" style="cursor: pointer; display: block;">
                        <MudStack AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" />
                            <MudText Typo="Typo.h6">Datei hier ablegen oder klicken</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Unterstützt SPS-Projekte, Office, Archive, etc. (Große Dateien >1GB werden via LFS verarbeitet)
                            </MudText>
                        </MudStack>
                    </label>
                </MudPaper>

                @if (selectedFile != null)
                {
                    <MudAlert Severity="Severity.Success" Dense="true">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@GetFileIcon(selectedFile.Name)" />
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        <strong>@selectedFile.Name</strong>
                                    </MudText>
                                    <MudText Typo="Typo.caption">
                                        @FormatFileSize(selectedFile.Size)
                                    </MudText>
                                </MudStack>
                            </MudStack>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                           Size="Size.Small"
                                           OnClick="ClearFile" />
                        </MudStack>
                    </MudAlert>
                }
            </MudStack>
            
            <MudStack Spacing="2">
                <MudText Typo="Typo.subtitle1">
                    <MudIcon Icon="@Icons.Material.Filled.Message" Size="Size.Small" Style="margin-right: 4px;" />
                    Commit-Nachricht *
                </MudText>
                <MudTextField @bind-Value="commitMessage"
                              @oninput="OnCommitMessageInput"
                              Label="Beschreibung der Änderung"
                              Lines="2"
                              Placeholder="Beschreibe deine Änderung..."
                              HelperText="Beschreibe was und warum du diese Datei eincheckst"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Comment"
                              Error="@(hasTriedUpload && !IsValidCommitMessage())"
                              ErrorText="Eigene Commit-Nachricht ist erforderlich (mind. 4 Zeichen)" />

                @if (hasTriedUpload && !IsValidCommitMessage())
                {
                    <MudAlert Severity="Severity.Error" Dense="true">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudIcon Icon="@Icons.Material.Filled.Error" />
                            <MudText Typo="Typo.body2">
                                <strong>Commit-Nachricht fehlt:</strong> Bitte geben Sie eine eigene Beschreibung ein.
                            </MudText>
                        </MudStack>
                    </MudAlert>
                }
            </MudStack>

            @if (isUploading)
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                     <MudStack Spacing="2">
                        <MudText Typo="Typo.body2" Style="font-weight: 500;">
                            Upload läuft...
                        </MudText>
                        <MudProgressLinear Value="uploadProgress"
                                           Color="Color.Primary"
                                           Size="Size.Medium" />
                        <MudText Typo="Typo.caption" Style="color: #4A5568;">
                            @uploadStatus
                        </MudText>
                    </MudStack>
                </MudAlert>
            }

        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel"
                   Variant="Variant.Text"
                   Disabled="@isUploading">
            Abbrechen
        </MudButton>
        <MudButton OnClick="StartUpload"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   Disabled="@(selectedFile == null || isUploading)">
            @if (isUploading)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 8px;" />
                <span>Wird eingecheckt...</span>
            }
            else
            {
                <span>Einchecken</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public string RepositoryOwner { get; set; } = "";
    [Parameter] public string RepositoryName { get; set; } = "";
    [Parameter] public string CurrentPath { get; set; } = "";
    [Parameter] public EventCallback OnUploadSuccess { get; set; }

    private IBrowserFile? selectedFile;
    private string customFileName = ""; // Wird aktuell nicht verwendet, aber für Vollständigkeit behalten
    private string commitMessage = "";
    private bool isUploading = false;
    private string uploadStatus = "";
    private bool hasTriedUpload = false;
    
    private double uploadProgress = 0;

    private bool CanUpload => selectedFile != null &&
                              !isUploading &&
                              IsValidCommitMessage();
    
    private bool IsValidCommitMessage()
    {
        if (string.IsNullOrWhiteSpace(commitMessage))
            return false;

        var trimmed = commitMessage.Trim();
        return trimmed.Length > 3; // Mindestens 4 Zeichen
    }

    private void OnCommitMessageInput(ChangeEventArgs e)
    {
        commitMessage = e.Value?.ToString() ?? "";
        if (hasTriedUpload)
        {
            hasTriedUpload = false;
        }
        StateHasChanged();
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        customFileName = "";
        StateHasChanged();
    }

    private void ClearFile()
    {
        selectedFile = null;
        customFileName = "";
        StateHasChanged();
    }

    private string GetTargetPathDisplay()
    {
        return string.IsNullOrEmpty(CurrentPath) ? "/" : $"/{CurrentPath}";
    }

    private string GetFinalFileName()
    {
        if (selectedFile == null) return "";
        return string.IsNullOrWhiteSpace(customFileName) ? selectedFile.Name : customFileName;
    }

    private string GetFullTargetPath()
    {
        var fileName = GetFinalFileName();
        if (string.IsNullOrEmpty(CurrentPath))
            return fileName;
        return $"{CurrentPath}/{fileName}";
    }
    
    private async Task StartUpload()
    {
        hasTriedUpload = true;
        StateHasChanged();

        if (!CanUpload)
        {
             if (!IsValidCommitMessage())
             {
                 Snackbar.Add("Eigene Commit-Nachricht ist erforderlich", Severity.Error);
             }
             return;
        }

        isUploading = true;
        await UpdateProgress(0, "Datei wird vorbereitet...");

        try
        {
            var fileName = GetFinalFileName();
            var fullPath = GetFullTargetPath();
            var message = commitMessage.Trim();

            await UpdateProgress(20, $"Lese {fileName}...");

            long maxFileSize = 2_000_000_000; // 2GB
            using var stream = selectedFile!.OpenReadStream(maxAllowedSize: maxFileSize);

            await UpdateProgress(50, "Checke in Repository ein (via Git LFS)...");

            var success = await GiteaService.UploadFileViaLfsAsync(
                RepositoryOwner,
                RepositoryName,
                fullPath,
                stream,
                message);

            if (success)
            {
                await UpdateProgress(100, "Erfolgreich eingecheckt!");
                Snackbar.Add($"Datei '{fileName}' erfolgreich eingecheckt!", Severity.Success);
                await Task.Delay(500);

                if (OnUploadSuccess.HasDelegate)
                {
                    await OnUploadSuccess.InvokeAsync();
                }
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                uploadStatus = "Einchecken fehlgeschlagen! Siehe Server-Logs für Details.";
                Snackbar.Add("Einchecken fehlgeschlagen.", Severity.Error);
                isUploading = false;
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Fehler: {ex.Message}";
            Snackbar.Add($"Upload-Fehler: {ex.Message}", Severity.Error);
            isUploading = false;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task UpdateProgress(double progress, string message)
    {
        uploadProgress = progress;
        uploadStatus = message;
        StateHasChanged();
        await Task.Delay(150);
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".pdf" => Icons.Material.Filled.PictureAsPdf,
            ".doc" or ".docx" => Icons.Material.Filled.Description,
            ".jpg" or ".jpeg" or ".png" or ".gif" => Icons.Material.Filled.Image,
            ".zip" or ".rar" or ".7z" => Icons.Material.Filled.Archive,
            _ => Icons.Material.Filled.InsertDriveFile
        };
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        return $"{bytes / (1024 * 1024 * 1024):F1} GB";
    }

    private void Cancel() => MudDialog.Cancel();
}

