@using MECWeb.DbModels.Project
@using Microsoft.EntityFrameworkCore
@using MECWeb.Services
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar
@inject GiteaService GiteaService

<EditForm Model="@project" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Class="pl-4 pr-4" Style="width: 500px;">
        <TitleContent>
            <MudText Typo="Typo.h6" Class="mr-8">Neues Projekt anlegen</MudText>
        </TitleContent>
        <DialogContent>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudText Typo="Typo.subtitle1" Style="margin-right: -10px; min-width: 35px;">S-</MudText>
                <MudTextField Label="Projektnummer" Typo="Typo.subtitle1" ShrinkLabel="true"
                              @bind-Value="NumericPartOfProjectNumber"
                              For="@(() => project.ProjectNumber)"
                              Validation="@(new Func<string, Task<IEnumerable<string>>>(ValidateProjectNumberAsync))"
                              Immediate="true"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="Projektnummer ist erforderlich"
                              T="string" />
            </MudStack>
            <MudTextField Label="Name" Typo="Typo.subtitle1" ShrinkLabel="true" Class="mt-4"
                          @bind-Value="project.Name"
                          For="@(() => project.Name)"
                          Required="true"
                          RequiredError="Name ist erforderlich"
                          Variant="Variant.Outlined"
                          T="string" />
            <MudTextField Label="Beschreibung" Lines="3" Typo="Typo.subtitle1" ShrinkLabel="true" Class="mt-4"
                          @bind-Value="project.Description"
                          Variant="Variant.Outlined"
                          T="string" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = string.Empty">
                    @errorMessage
                </MudAlert>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Abbrechen</MudButton>
            <MudButton ButtonType="ButtonType.Submit"
                       Color="Color.Primary"
                       Disabled="@isSubmitting"
                       Variant="Variant.Filled">
                 @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>Wird erstellt...</span>
                }
                else
                {
                    <span>Erstellen</span>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    
    // Das [Inject] Attribut hier war redundant und wurde entfernt.

    private DbProject project = new();
    private string numericPartOfProjectNumber = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private string NumericPartOfProjectNumber
    {
        get => numericPartOfProjectNumber;
        set
        {
            numericPartOfProjectNumber = value;
            if (string.IsNullOrWhiteSpace(value))
            {
                project.ProjectNumber = string.Empty;
            }
            else
            {
                project.ProjectNumber = $"S-{value}";
            }
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> ValidateProjectNumberAsync(string number)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(number))
        {
            return errors; 
        }
        if (!int.TryParse(number, out _))
        {
            errors.Add("Projektnummer darf nur Zahlen enthalten.");
            return errors;
        }
        var fullNumber = $"S-{number}";
        bool exists = await DbContext.Project.AnyAsync(p => p.ProjectNumber == fullNumber);
        if (exists)
        {
            errors.Add($"Projektnummer {fullNumber} existiert bereits.");
        }
        return errors;
    }

    private async Task Submit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Schritt 1: Projekt in der lokalen Datenbank erstellen
            project.ProjectNumber = $"S-{numericPartOfProjectNumber}";
            project.CreationDate = DateTime.UtcNow;
            project.LastChange = DateTime.UtcNow;

            DbContext.Project.Add(project);
            await DbContext.SaveChangesAsync();

            // Schritt 2: Gitea Repository erstellen
            try
            {
                var repoName = project.ProjectNumber;
                var repoDescription = $"Archiv für Projekt: {project.Name}";
                var owner = "barwiaex"; 

                var newRepo = await GiteaService.CreateRepositoryAsync(repoName, repoDescription);

                if (newRepo != null)
                {
                    // Schritt 3: Projekt mit Gitea-Infos aktualisieren
                    project.GitEnabled = true;
                    project.GitRepositoryName = newRepo.Name;
                    project.GitOwner = owner;
                    project.GitRepositoryUrl = newRepo.Html_Url;
                    
                    await DbContext.SaveChangesAsync();

                    // Schritt 4: Standard-Ordnerstruktur erstellen
                    var foldersToCreate = new List<string> { "Camera", "Software", "Hardware", "Abnahmen" };
                    foreach (var folder in foldersToCreate)
                    {
                        var placeholderPath = $"{folder}/.gitkeep";
                        await GiteaService.UploadFileAsync(owner, repoName, placeholderPath, new byte[0], $"Initial commit: Create {folder} folder");
                    }

                    Snackbar.Add($"Projekt und Git-Repo '{newRepo.Name}' mit Ordnerstruktur erfolgreich erstellt!", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Projekt erstellt, aber Gitea-Repo konnte nicht angelegt werden!", Severity.Warning);
                }
            }
            catch (Exception giteaEx)
            {
                Snackbar.Add($"Projekt wurde erstellt, aber die Gitea-Anbindung schlug fehl: {giteaEx.Message}", Severity.Warning);
                Console.WriteLine($"Gitea Exception: {giteaEx}");
            }

            MudDialog.Close(DialogResult.Ok(project));
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Erstellen des Projekts: {ex.Message}";
            Console.WriteLine($"Exception beim Erstellen des Projekts: {ex}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task OnValidSubmit(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(numericPartOfProjectNumber) || string.IsNullOrWhiteSpace(project.Name))
        {
            errorMessage = "Projektnummer und Name sind erforderlich.";
            return;
        }
        if (!int.TryParse(numericPartOfProjectNumber, out _))
        {
            errorMessage = "Projektnummer darf nur Zahlen enthalten.";
            return;
        }
        var fullNumber = $"S-{numericPartOfProjectNumber}";
        bool exists = await DbContext.Project.AnyAsync(p => p.ProjectNumber == fullNumber);
        if (exists)
        {
            errorMessage = $"Projektnummer {fullNumber} existiert bereits.";
            return;
        }
        await Submit();
    }
}

